{
  "version": 3,
  "sources": ["../src/index.ts", "../src/State.ts", "../src/BehaviourTreeDefinitionUtilities.ts", "../src/mdsl/MDSLUtilities.ts", "../src/mdsl/MDSLNodeArgumentParser.ts", "../src/mdsl/MDSLNodeAttributeParser.ts", "../src/mdsl/MDSLDefinitionParser.ts", "../src/BehaviourTreeDefinitionValidator.ts", "../src/Lookup.ts", "../src/attributes/guards/GuardUnsatisifedException.ts", "../src/attributes/guards/GuardPath.ts", "../src/nodes/Node.ts", "../src/nodes/decorator/Decorator.ts", "../src/nodes/decorator/Root.ts", "../src/attributes/Attribute.ts", "../src/attributes/guards/Guard.ts", "../src/attributes/guards/While.ts", "../src/attributes/guards/Until.ts", "../src/attributes/callbacks/Callback.ts", "../src/attributes/callbacks/Entry.ts", "../src/attributes/callbacks/Step.ts", "../src/attributes/callbacks/Exit.ts", "../src/BehaviourTreeBuilder.ts", "../src/BehaviourTree.ts"],
  "sourcesContent": ["import State from \"./State\";\nimport { validateDefinition } from \"./BehaviourTreeDefinitionValidator\";\nimport { convertMDSLToJSON } from \"./mdsl/MDSLDefinitionParser\";\nimport { BehaviourTree, FlattenedTreeNode } from \"./BehaviourTree\";\n\nexport { BehaviourTree, State, convertMDSLToJSON, validateDefinition };\nexport type { FlattenedTreeNode };\n", "/**\n * Enumeration of node state types.\n */\nexport enum State {\n    READY = \"mistreevous.ready\",\n    RUNNING = \"mistreevous.running\",\n    SUCCEEDED = \"mistreevous.succeeded\",\n    FAILED = \"mistreevous.failed\"\n}\n\nexport { State as default };\n\nexport type CompleteState = State.SUCCEEDED | State.FAILED;\nexport type AnyState = State.READY | State.RUNNING | CompleteState;\n", "import {\n    NodeDefinition,\n    RootNodeDefinition,\n    DecoratorNodeDefinition,\n    CompositeNodeDefinition,\n    AnyNodeDefinition,\n    BranchNodeDefinition\n} from \"./BehaviourTreeDefinition\";\n\n/**\n * A type guard function that returns true if the specified node satisfies the RootNodeDefinition type.\n * @param node The node.\n * @returns A value of true if the specified node satisfies the RootNodeDefinition type.\n */\nexport function isRootNode(node: NodeDefinition): node is RootNodeDefinition {\n    return node.type === \"root\";\n}\n\n/**\n * A type guard function that returns true if the specified node satisfies the BranchNodeDefinition type.\n * @param node The node.\n * @returns A value of true if the specified node satisfies the BranchNodeDefinition type.\n */\nexport function isBranchNode(node: NodeDefinition): node is BranchNodeDefinition {\n    return node.type === \"branch\";\n}\n\n/**\n * A type guard function that returns true if the specified node satisfies the NodeDefinition type.\n * @param node The node.\n * @returns A value of true if the specified node satisfies the NodeDefinition type.\n */\nexport function isLeafNode(node: NodeDefinition): node is NodeDefinition {\n    return [\"branch\", \"action\", \"condition\", \"wait\"].includes(node.type);\n}\n\n/**\n * A type guard function that returns true if the specified node satisfies the DecoratorNodeDefinition type.\n * @param node The node.\n * @returns A value of true if the specified node satisfies the DecoratorNodeDefinition type.\n */\nexport function isDecoratorNode(node: NodeDefinition): node is DecoratorNodeDefinition {\n    return [\"root\", \"repeat\", \"retry\", \"flip\", \"succeed\", \"fail\"].includes(node.type);\n}\n\n/**\n * A type guard function that returns true if the specified node satisfies the CompositeNodeDefinition type.\n * @param node The node.\n * @returns A value of true if the specified node satisfies the CompositeNodeDefinition type.\n */\nexport function isCompositeNode(node: NodeDefinition): node is CompositeNodeDefinition {\n    return [\"sequence\", \"selector\", \"lotto\", \"parallel\"].includes(node.type);\n}\n\n/**\n * Flatten a node definition into an array of all of its nested node definitions.\n * @param nodeDefinition The node definition to flatten.\n * @returns An array of all of nested node definitions.\n */\nexport function flattenDefinition(nodeDefinition: AnyNodeDefinition): AnyNodeDefinition[] {\n    const nodes: AnyNodeDefinition[] = [];\n\n    const processNode = (currentNodeDefinition: AnyNodeDefinition) => {\n        nodes.push(currentNodeDefinition);\n\n        if (isCompositeNode(currentNodeDefinition)) {\n            currentNodeDefinition.children.forEach(processNode);\n        } else if (isDecoratorNode(currentNodeDefinition)) {\n            processNode(currentNodeDefinition.child);\n        }\n    };\n\n    processNode(nodeDefinition);\n\n    return nodes;\n}\n\n/**\n * Determines whether the passed value is an integer.\n * @param value The value to check.\n * @returns Whether the passed value is an integer.\n */\nexport function isInteger(value: unknown): boolean {\n    return typeof value === \"number\" && Math.floor(value) === value;\n}\n", "/**\n * A type defining an object that holds a reference to substitued string literals parsed from the definition.\n */\nexport type StringLiteralPlaceholders = { [key: string]: string };\n\n/**\n * Pop the next raw token from the specified array of tokens and throw an error if it wasn't the expected one.\n * @param tokens The array of tokens.\n * @param expected An optional string or array or items, one of which must match the next popped token.\n * @returns The popped token.\n */\nexport function popAndCheck(tokens: string[], expected?: string | string[]): string {\n    // Get and remove the next token.\n    const popped = tokens.shift();\n\n    // We were expecting another token but there aren't any.\n    if (popped === undefined) {\n        throw new Error(\"unexpected end of definition\");\n    }\n\n    // Do we have an expected token/tokens array?\n    if (expected != undefined) {\n        // Get an array of expected values, if the popped token matches any then we are all good.\n        const expectedValues = typeof expected === \"string\" ? [expected] : expected;\n\n        // Check whether the popped token matches at least one of our expected items.\n        var tokenMatchesExpectation = expectedValues.some((item) => popped.toUpperCase() === item.toUpperCase());\n\n        // Throw an error if the popped token didn't match any of our expected items.\n        if (!tokenMatchesExpectation) {\n            const expectationString = expectedValues.map((item) => \"'\" + item + \"'\").join(\" or \");\n            throw new Error(\"unexpected token found. Expected \" + expectationString + \" but got '\" + popped + \"'\");\n        }\n    }\n\n    // Return the popped token.\n    return popped;\n}\n\n/**\n * Swaps out any node/attribute argument string literals with placeholders.\n * @param definition The definition.\n * @returns An object containing a mapping of placeholders to original string values as well as the processed definition string.\n */\nexport function substituteStringLiterals(definition: string): {\n    placeholders: StringLiteralPlaceholders;\n    processedDefinition: string;\n} {\n    // Create an object to hold the mapping of placeholders to original string values.\n    const placeholders: StringLiteralPlaceholders = {};\n\n    // Replace any string literals wrapped with double quotes in our definition with placeholders to be processed later.\n    const processedDefinition = definition.replace(/\\\"(\\\\.|[^\"\\\\])*\\\"/g, (match) => {\n        var strippedMatch = match.substring(1, match.length - 1);\n        var placeholder = Object.keys(placeholders).find((key) => placeholders[key] === strippedMatch);\n\n        // If we have no existing string literal match then create a new placeholder.\n        if (!placeholder) {\n            placeholder = `@@${Object.keys(placeholders).length}@@`;\n            placeholders[placeholder] = strippedMatch;\n        }\n\n        return placeholder;\n    });\n\n    return { placeholders, processedDefinition };\n}\n\n/**\n * Parse the tree definition into an array of raw tokens.\n * @param definition The definition.\n * @returns An array of tokens parsed from the definition.\n */\nexport function parseTokensFromDefinition(definition: string): string[] {\n    // Add some space around various important characters so that they can be plucked out easier as individual tokens.\n    definition = definition.replace(/\\(/g, \" ( \");\n    definition = definition.replace(/\\)/g, \" ) \");\n    definition = definition.replace(/\\{/g, \" { \");\n    definition = definition.replace(/\\}/g, \" } \");\n    definition = definition.replace(/\\]/g, \" ] \");\n    definition = definition.replace(/\\[/g, \" [ \");\n    definition = definition.replace(/\\,/g, \" , \");\n\n    // Split the definition into raw token form and return it.\n    return definition.replace(/\\s+/g, \" \").trim().split(\" \");\n}\n", "import { StringLiteralPlaceholders, popAndCheck } from \"./MDSLUtilities\";\n\n/**\n * A type representing any node function argument.\n */\ntype Argument<T> = {\n    /**\n     * The argument value.\n     */\n    value: T;\n    /**\n     * The argument type, used for validation.\n     */\n    type: string;\n};\n\ntype NullArgument = Argument<null> & {\n    type: \"null\";\n};\n\ntype BooleanArgument = Argument<boolean> & {\n    type: \"boolean\";\n};\n\ntype NumberArgument = Argument<number> & {\n    type: \"number\";\n    /**\n     * A flag defining whether the number argument value is a valid integer. (used for validation)\n     */\n    isInteger: boolean;\n};\n\ntype StringPlaceholderArgument = Argument<string> & {\n    type: \"string\";\n};\n\ntype IdentifierArgument = Argument<string> & {\n    type: \"identifier\";\n};\n\n/**\n * A type representing a reference to any node function argument.\n */\ntype AnyArgument = NullArgument | BooleanArgument | NumberArgument | StringPlaceholderArgument | IdentifierArgument;\n\n/**\n * Parse an array of argument definitions from the specified tokens array.\n * @param tokens The array tokens to parse the argument definitions from.\n * @param stringArgumentPlaceholders The mapping of string literal node argument placeholders to original values.\n * @param argumentValidator The argument validator function.\n * @param validationFailedMessage  The exception message to throw if argument validation fails.\n * @returns An array of argument definitions parsed from the specified tokens array.\n */\nexport function parseArgumentTokens(\n    tokens: string[],\n    stringArgumentPlaceholders: StringLiteralPlaceholders\n): AnyArgument[] {\n    const argumentList: AnyArgument[] = [];\n\n    // If the next token is not a '[' or '(' then we have no arguments to parse.\n    if (![\"[\", \"(\"].includes(tokens[0])) {\n        return argumentList;\n    }\n\n    // Any lists of arguments will always be wrapped in '[]' for node arguments or '()' for attribute arguments.\n    // We are looking for a '[' or '(' opener that wraps the argument tokens and the relevant closer.\n    const closingToken = popAndCheck(tokens, [\"[\", \"(\"]) === \"[\" ? \"]\" : \")\";\n\n    const argumentListTokens: string[] = [];\n\n    // Grab all tokens between the '[' and ']' or '(' and ')'.\n    while (tokens.length && tokens[0] !== closingToken) {\n        // The next token is part of our arguments list.\n        argumentListTokens.push(tokens.shift()!);\n    }\n\n    // Validate the order of the argument tokens. Each token must either be a ',' or a single argument that satisfies the validator.\n    argumentListTokens.forEach((token, index) => {\n        // Get whether this token should be an actual argument.\n        const shouldBeArgumentToken = !(index & 1);\n\n        // If the current token should be an actual argument then validate it, otherwise it should be a ',' token.\n        if (shouldBeArgumentToken) {\n            // Get the argument definition.\n            const argumentDefinition = getArgumentDefinition(token, stringArgumentPlaceholders);\n\n            // This is a valid argument!\n            argumentList.push(argumentDefinition);\n        } else {\n            // The current token should be a ',' token.\n            if (token !== \",\") {\n                throw new Error(`invalid argument list, expected ',' or ']' but got '${token}'`);\n            }\n        }\n    });\n\n    // The arguments list should terminate with a ']' or ')' token, depending on the opener.\n    popAndCheck(tokens, closingToken);\n\n    // Return the arguments.\n    return argumentList;\n}\n\n/**\n * Gets an argument value definition.\n * @param token The argument token.\n * @param stringArgumentPlaceholders The mapping of string literal node argument placeholders to original values.\n * @returns An argument value definition.\n */\nfunction getArgumentDefinition(token: string, stringArgumentPlaceholders: StringLiteralPlaceholders): AnyArgument {\n    // Check whether the token represents a null value.\n    if (token === \"null\") {\n        return {\n            value: null,\n            type: \"null\"\n        } as NullArgument;\n    }\n\n    // Check whether the token represents a boolean value.\n    if (token === \"true\" || token === \"false\") {\n        return {\n            value: token === \"true\",\n            type: \"boolean\"\n        } as BooleanArgument;\n    }\n\n    // Check whether the token represents a number value.\n    // TODO: Relies on broken isNaN - see MDN.\n    // if (!Number.isNaN(token)) {\n    if (!isNaN(token as any)) {\n        return {\n            value: parseFloat(token),\n            isInteger: parseFloat(token) === parseInt(token, 10),\n            type: \"number\"\n        } as NumberArgument;\n    }\n\n    // Check whether the token is a placeholder (e.g. @@0@@) representing a string literal.\n    if (token.match(/^@@\\d+@@$/g)) {\n        return {\n            value: stringArgumentPlaceholders[token].replace('\\\\\"', '\"'),\n            type: \"string\"\n        } as StringPlaceholderArgument;\n    }\n\n    // The only remaining option is that the argument value is an identifier.\n    return {\n        value: token,\n        type: \"identifier\"\n    } as IdentifierArgument;\n}\n", "import { NodeAttributeDefinition } from \"../BehaviourTreeDefinition\";\nimport { parseArgumentTokens } from \"./MDSLNodeArgumentParser\";\nimport { StringLiteralPlaceholders } from \"./MDSLUtilities\";\n\n/**\n * A type defining the attribute definitions of a node.\n */\ntype NodeAttributes = {\n    while?: NodeAttributeDefinition;\n    until?: NodeAttributeDefinition;\n    entry?: NodeAttributeDefinition;\n    exit?: NodeAttributeDefinition;\n    step?: NodeAttributeDefinition;\n};\n\n/**\n * Parse any node attribute definitions from the specified tokens array.\n * @param tokens The array of remaining tokens.\n * @param stringArgumentPlaceholders The mapping of string literal node argument placeholders to original values.\n * @returns An object of attribute definitions defined by any directly following tokens.\n */\nexport function parseAttributeTokens(\n    tokens: string[],\n    stringArgumentPlaceholders: StringLiteralPlaceholders\n): NodeAttributes {\n    const nodeAttributeNames: (keyof NodeAttributes)[] = [\"while\", \"until\", \"entry\", \"exit\", \"step\"];\n\n    // Create an object to hold any attributes found.\n    const attributes: NodeAttributes = {};\n\n    // Try to get the name of the attribute for the next token.\n    let nextAttributeName = tokens[0]?.toLowerCase() as keyof NodeAttributes;\n\n    // Pull attribute tokens as well as their arguments off of the tokens stack until we have no more.\n    while (nodeAttributeNames.includes(nextAttributeName)) {\n        // Check to make sure that we have not already created an attribute definition of this type.\n        if (attributes[nextAttributeName]) {\n            throw new Error(`duplicate attribute '${tokens[0].toUpperCase()}' found for node`);\n        }\n\n        // Remove the attribute name token from the array of tokens.\n        tokens.shift();\n\n        // Grab the attribute arguments, assuming the first to be an identifier.\n        const [attributeCallIdentifier, ...attributeArguments] = parseArgumentTokens(\n            tokens,\n            stringArgumentPlaceholders\n        );\n\n        // The first attribute argument has to be an identifer, this will reference an agent function.\n        if (attributeCallIdentifier?.type !== \"identifier\") {\n            throw new Error(\"expected agent function name identifier argument for attribute\");\n        }\n\n        // Any attribute arguments (other than the expected call identifier) must have a type of string, number, boolean or null.\n        attributeArguments\n            .filter((arg) => arg.type === \"identifier\")\n            .forEach((arg) => {\n                throw new Error(\n                    `invalid attribute argument value '${arg.value}', must be string, number, boolean or null`\n                );\n            });\n\n        // Create the attribute definition and add it to the object of attribute definitions found.\n        attributes[nextAttributeName] = {\n            call: attributeCallIdentifier.value,\n            args: attributeArguments.map(({ value }) => value)\n        };\n\n        // Try to get the next attribute name token, as there could be multiple.\n        nextAttributeName = tokens[0]?.toLowerCase() as keyof NodeAttributes;\n    }\n\n    return attributes;\n}\n", "import {\n    ActionNodeDefinition,\n    AnyChildNodeDefinition,\n    AnyNodeDefinition,\n    BranchNodeDefinition,\n    ConditionNodeDefinition,\n    FailNodeDefinition,\n    FlipNodeDefinition,\n    LottoNodeDefinition,\n    ParallelNodeDefinition,\n    RepeatNodeDefinition,\n    RetryNodeDefinition,\n    RootNodeDefinition,\n    SelectorNodeDefinition,\n    SequenceNodeDefinition,\n    SucceedNodeDefinition,\n    WaitNodeDefinition\n} from \"../BehaviourTreeDefinition\";\nimport { isCompositeNode, isDecoratorNode, isLeafNode, isRootNode } from \"../BehaviourTreeDefinitionUtilities\";\nimport { parseArgumentTokens } from \"./MDSLNodeArgumentParser\";\nimport { parseAttributeTokens } from \"./MDSLNodeAttributeParser\";\nimport {\n    StringLiteralPlaceholders,\n    parseTokensFromDefinition,\n    popAndCheck,\n    substituteStringLiterals\n} from \"./MDSLUtilities\";\n\n/**\n * Convert the MDSL tree definition string into an equivalent JSON definition.\n * @param definition The tree definition string as MDSL.\n * @returns The root node JSON definitions.\n */\nexport function convertMDSLToJSON(definition: string): RootNodeDefinition[] {\n    // Swap out any node/attribute argument string literals with a placeholder and get a mapping of placeholders to original values as well as the processed definition.\n    const { placeholders, processedDefinition } = substituteStringLiterals(definition);\n\n    // Parse our definition definition string into an array of raw tokens.\n    const tokens = parseTokensFromDefinition(processedDefinition);\n\n    return convertTokensToJSONDefinition(tokens, placeholders);\n}\n\n/**\n * Converts the specified tree definition tokens into a JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The root node JSON definitions.\n */\nfunction convertTokensToJSONDefinition(\n    tokens: string[],\n    stringLiteralPlaceholders: StringLiteralPlaceholders\n): RootNodeDefinition[] {\n    // There must be at least 3 tokens for the tree definition to be valid. 'ROOT', '{' and '}'.\n    if (tokens.length < 3) {\n        throw new Error(\"invalid token count\");\n    }\n\n    // We should have a matching number of '{' and '}' tokens. If not, then there are scopes that have not been properly closed.\n    if (tokens.filter((token) => token === \"{\").length !== tokens.filter((token) => token === \"}\").length) {\n        throw new Error(\"scope character mismatch\");\n    }\n\n    // Create an array of tree stack arrays where root nodes will always be at the botton and the current composite/decorator node at the top.\n    // There should be an element in this array for every root node defined and every element should be an array with a root note as the first element.\n    // E.g. A definition with two root nodes defined:\n    // [\n    //    [root, lotto, sequence],\n    //    [root, selector]\n    // ]\n    const treeStacks: [Partial<RootNodeDefinition>, ...Partial<AnyChildNodeDefinition>[]][] = [];\n\n    // Create an array of all root node definitions that we create.\n    const rootNodes: Partial<RootNodeDefinition>[] = [];\n\n    // A helper function used to push node definitions onto the tree stack.\n    const pushNode = (node: AnyNodeDefinition) => {\n        // If the node is a root node then we need to create a new tree stack array with the root node at the root.\n        if (isRootNode(node)) {\n            // Add the root node definition to our array of all parsed root node definitions.\n            rootNodes.push(node);\n\n            // Add the root node definition to the root of a new tree stack.\n            treeStacks.push([node]);\n\n            return;\n        }\n\n        // All non-root nodes should be pushed after their root nodes so handle cases\n        // where we may not have any tree stacks or our top-most tree stack is empty.\n        if (!treeStacks.length || !treeStacks[treeStacks.length - 1].length) {\n            throw new Error(\"expected root node at base of definition\");\n        }\n\n        // Get the current tree stack that we are populating.\n        const topTreeStack = treeStacks[treeStacks.length - 1];\n\n        // Get the top-most node in the current tree stack, this will be a composite/decorator node\n        // for which we will populate its children array if composite or setting its child if a decorator.\n        const topTreeStackTopNode = topTreeStack[topTreeStack.length - 1] as AnyNodeDefinition;\n\n        // If the top-most node in the current root stack is a composite or decorator\n        // node then the current node should be added as a child of the top-most node.\n        if (isCompositeNode(topTreeStackTopNode)) {\n            topTreeStackTopNode.children = topTreeStackTopNode.children || [];\n            topTreeStackTopNode.children.push(node);\n        } else if (isDecoratorNode(topTreeStackTopNode)) {\n            // If the top node already has a child node set then throw an error as a decorator should only have a single child.\n            if (topTreeStackTopNode.child) {\n                throw new Error(\"a decorator node must only have a single child node\");\n            }\n\n            topTreeStackTopNode.child = node;\n        }\n\n        // If the node we are adding is also a composite or decorator node, then we should push it\n        // onto the current tree stack, as subsequent nodes will be added as its child/children.\n        if (!isLeafNode(node)) {\n            topTreeStack.push(node);\n        }\n    };\n\n    // A helper function used to pop node definitions off of the stack.\n    const popNode = () => {\n        // Get the current tree stack that we are populating.\n        const topTreeStack = treeStacks[treeStacks.length - 1];\n\n        // Pop the top-most node in the current tree stack if there is one.\n        if (topTreeStack.length) {\n            topTreeStack.pop();\n        }\n\n        // We don't want any empty tree stacks in our stack of tree stacks.\n        if (!topTreeStack.length) {\n            treeStacks.pop();\n        }\n    };\n\n    // We should keep processing the raw tokens until we run out of them.\n    while (tokens.length) {\n        // Grab the next token.\n        const token = tokens.shift()!;\n\n        // How we create the next node depends on the current raw token value.\n        switch (token.toUpperCase()) {\n            case \"ROOT\": {\n                pushNode(createRootNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"SUCCEED\": {\n                pushNode(createSucceedNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"FAIL\": {\n                pushNode(createFailNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"FLIP\": {\n                pushNode(createFlipNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"REPEAT\": {\n                pushNode(createRepeatNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"RETRY\": {\n                pushNode(createRetryNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"SEQUENCE\": {\n                pushNode(createSequenceNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"SELECTOR\": {\n                pushNode(createSelectorNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"PARALLEL\": {\n                pushNode(createParallelNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"LOTTO\": {\n                pushNode(createLottoNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"ACTION\": {\n                pushNode(createActionNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"CONDITION\": {\n                pushNode(createConditionNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"WAIT\": {\n                pushNode(createWaitNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"BRANCH\": {\n                pushNode(createBranchNode(tokens, stringLiteralPlaceholders));\n                break;\n            }\n\n            case \"}\": {\n                // The '}' character closes the current scope and means that we have to pop a node off of the current stack.\n                popNode();\n                break;\n            }\n\n            default: {\n                throw new Error(`unexpected token: ${token}`);\n            }\n        }\n    }\n\n    return rootNodes as RootNodeDefinition[];\n}\n\n/**\n * Creates a root node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The root node JSON definition.\n */\nfunction createRootNode(tokens: string[], stringLiteralPlaceholders: StringLiteralPlaceholders): RootNodeDefinition {\n    // Create the root node definition.\n    let node = {\n        type: \"root\",\n        id: undefined\n    } as RootNodeDefinition;\n\n    // Parse any node arguments, we should only have one if any which will be an identifier argument for the root identifier.\n    const nodeArguments = parseArgumentTokens(tokens, stringLiteralPlaceholders);\n\n    // Check whether any node arguments were defined.\n    if (nodeArguments.length) {\n        // We should only have one argument, if any, which will be an identifier argument for the root identifier.\n        if (nodeArguments.length === 1 && nodeArguments[0].type === \"identifier\") {\n            // The root node identifier will be the first and only node argument value.\n            node.id = nodeArguments[0].value as string;\n        } else {\n            throw new Error(\"expected single root name argument\");\n        }\n    }\n\n    // Grab any node attribute definitions and spread them into the node definition.\n    node = { ...node, ...parseAttributeTokens(tokens, stringLiteralPlaceholders) };\n\n    // This is a decorator node, so we expect an opening '{'.\n    popAndCheck(tokens, \"{\");\n\n    // Return the root node definition.\n    return node;\n}\n\n/**\n * Creates a succeed node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The succeed node JSON definition.\n */\nfunction createSucceedNode(\n    tokens: string[],\n    stringLiteralPlaceholders: StringLiteralPlaceholders\n): SucceedNodeDefinition {\n    const node = {\n        type: \"succeed\",\n        ...parseAttributeTokens(tokens, stringLiteralPlaceholders)\n    } as SucceedNodeDefinition;\n\n    // This is a decorator node, so we expect an opening '{'.\n    popAndCheck(tokens, \"{\");\n\n    // Return the succeed node definition.\n    return node;\n}\n\n/**\n * Creates a fail node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The fail node JSON definition.\n */\nfunction createFailNode(tokens: string[], stringLiteralPlaceholders: StringLiteralPlaceholders): FailNodeDefinition {\n    const node = {\n        type: \"fail\",\n        ...parseAttributeTokens(tokens, stringLiteralPlaceholders)\n    } as FailNodeDefinition;\n\n    // This is a decorator node, so we expect an opening '{'.\n    popAndCheck(tokens, \"{\");\n\n    // Return the fail node definition.\n    return node;\n}\n\n/**\n * Creates a flip node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The flip node JSON definition.\n */\nfunction createFlipNode(tokens: string[], stringLiteralPlaceholders: StringLiteralPlaceholders): FlipNodeDefinition {\n    const node = {\n        type: \"flip\",\n        ...parseAttributeTokens(tokens, stringLiteralPlaceholders)\n    } as FlipNodeDefinition;\n\n    // This is a decorator node, so we expect an opening '{'.\n    popAndCheck(tokens, \"{\");\n\n    // Return the flip node definition.\n    return node;\n}\n\n/**\n * Creates a repeat node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The repeat node JSON definition.\n */\nfunction createRepeatNode(\n    tokens: string[],\n    stringLiteralPlaceholders: StringLiteralPlaceholders\n): RepeatNodeDefinition {\n    let node = { type: \"repeat\" } as RepeatNodeDefinition;\n\n    // Get the node arguments.\n    const nodeArguments = parseArgumentTokens(tokens, stringLiteralPlaceholders);\n\n    // The arguments of a repeat node are optional. We may have:\n    // - No node arguments, in which case the repeat note will iterate indefinitely.\n    // - One node argument which will be the explicit number of iterations to make.\n    // - Two node arguments which define the min and max iteration bounds from which a random iteration count will be picked.\n    if (nodeArguments.length) {\n        // All repeat node arguments MUST be of type number and must be integer.\n        nodeArguments\n            .filter((arg) => arg.type !== \"number\" || !arg.isInteger)\n            .forEach(() => {\n                throw new Error(`repeat node iteration counts must be integer values`);\n            });\n\n        // We should have got one or two iteration counts.\n        if (nodeArguments.length === 1) {\n            // A static iteration count was defined.\n            node.iterations = nodeArguments[0].value as number;\n        } else if (nodeArguments.length === 2) {\n            // A minimum and maximum iteration count was defined.\n            node.iterations = [nodeArguments[0].value as number, nodeArguments[1].value as number];\n        } else {\n            // An incorrect number of iteration counts was defined.\n            throw new Error(\"invalid number of repeat node iteration count arguments defined\");\n        }\n    }\n\n    // Grab any node attribute definitions and spread them into the node definition.\n    node = { ...node, ...parseAttributeTokens(tokens, stringLiteralPlaceholders) };\n\n    // This is a decorator node, so we expect an opening '{'.\n    popAndCheck(tokens, \"{\");\n\n    // Return the repeat node definition.\n    return node;\n}\n\n/**\n * Creates a retry node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The retry node JSON definition.\n */\nfunction createRetryNode(tokens: string[], stringLiteralPlaceholders: StringLiteralPlaceholders): RetryNodeDefinition {\n    let node = { type: \"retry\" } as RetryNodeDefinition;\n\n    // Get the node arguments.\n    const nodeArguments = parseArgumentTokens(tokens, stringLiteralPlaceholders);\n\n    // The arguments of a retry node are optional. We may have:\n    // - No node arguments, in which case the retry note will attempt indefinitely.\n    // - One node argument which will be the explicit number of attempts to make.\n    // - Two node arguments which define the min and max attempt bounds from which a random attempt count will be picked.\n    if (nodeArguments.length) {\n        // All retry node arguments MUST be of type number and must be integer.\n        nodeArguments\n            .filter((arg) => arg.type !== \"number\" || !arg.isInteger)\n            .forEach(() => {\n                throw new Error(`retry node attempt counts must be integer values`);\n            });\n\n        // We should have got one or two attempt counts.\n        if (nodeArguments.length === 1) {\n            // A static attempt count was defined.\n            node.attempts = nodeArguments[0].value as number;\n        } else if (nodeArguments.length === 2) {\n            // A minimum and maximum attempt count was defined.\n            node.attempts = [nodeArguments[0].value as number, nodeArguments[1].value as number];\n        } else {\n            // An incorrect number of attempt counts was defined.\n            throw new Error(\"invalid number of retry node attempt count arguments defined\");\n        }\n    }\n\n    // Grab any node attribute definitions and spread them into the node definition.\n    node = { ...node, ...parseAttributeTokens(tokens, stringLiteralPlaceholders) };\n\n    // This is a decorator node, so we expect an opening '{'.\n    popAndCheck(tokens, \"{\");\n\n    // Return the retry node definition.\n    return node;\n}\n\n/**\n * Creates a sequence node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The sequence node JSON definition.\n */\nfunction createSequenceNode(\n    tokens: string[],\n    stringLiteralPlaceholders: StringLiteralPlaceholders\n): SequenceNodeDefinition {\n    const node = {\n        type: \"sequence\",\n        ...parseAttributeTokens(tokens, stringLiteralPlaceholders)\n    } as SequenceNodeDefinition;\n\n    // This is a composite node, so we expect an opening '{'.\n    popAndCheck(tokens, \"{\");\n\n    // Return the sequence node definition.\n    return node;\n}\n\n/**\n * Creates a selector node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The selector node JSON definition.\n */\nfunction createSelectorNode(\n    tokens: string[],\n    stringLiteralPlaceholders: StringLiteralPlaceholders\n): SelectorNodeDefinition {\n    const node = {\n        type: \"selector\",\n        ...parseAttributeTokens(tokens, stringLiteralPlaceholders)\n    } as SelectorNodeDefinition;\n\n    // This is a composite node, so we expect an opening '{'.\n    popAndCheck(tokens, \"{\");\n\n    // Return the selector node definition.\n    return node;\n}\n\n/**\n * Creates a parallel node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The parallel node JSON definition.\n */\nfunction createParallelNode(\n    tokens: string[],\n    stringLiteralPlaceholders: StringLiteralPlaceholders\n): ParallelNodeDefinition {\n    const node = {\n        type: \"parallel\",\n        ...parseAttributeTokens(tokens, stringLiteralPlaceholders)\n    } as ParallelNodeDefinition;\n\n    // This is a composite node, so we expect an opening '{'.\n    popAndCheck(tokens, \"{\");\n\n    // Return the parallel node definition.\n    return node;\n}\n\n/**\n * Creates a lotto node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The lotto node JSON definition.\n */\nfunction createLottoNode(tokens: string[], stringLiteralPlaceholders: StringLiteralPlaceholders): LottoNodeDefinition {\n    // If any node arguments have been defined then they must be our weights.\n    const nodeArguments = parseArgumentTokens(tokens, stringLiteralPlaceholders);\n\n    // All lotto node arguments MUST be of type number and must be integer.\n    nodeArguments\n        .filter((arg) => arg.type !== \"number\" || !arg.isInteger)\n        .forEach(() => {\n            throw new Error(`lotto node weight arguments must be integer values`);\n        });\n\n    const node = {\n        type: \"lotto\",\n        weights: nodeArguments.map(({ value }) => value),\n        ...parseAttributeTokens(tokens, stringLiteralPlaceholders)\n    } as LottoNodeDefinition;\n\n    // This is a composite node, so we expect an opening '{'.\n    popAndCheck(tokens, \"{\");\n\n    // Return the lotto node definition.\n    return node;\n}\n\n/**\n * Creates an action node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The action node JSON definition.\n */\nfunction createActionNode(\n    tokens: string[],\n    stringLiteralPlaceholders: StringLiteralPlaceholders\n): ActionNodeDefinition {\n    // Parse any node arguments, we should have at least one which will be an identifier argument for the action name\n    // and agent function to invoke for the action, all other arguments are to be passed as arguments to that function.\n    const [actionNameIdentifier, ...agentFunctionArgs] = parseArgumentTokens(tokens, stringLiteralPlaceholders);\n\n    // Our first argument MUST be defined and be an identifier as we require an action name argument.\n    if (actionNameIdentifier?.type !== \"identifier\") {\n        throw new Error(\"expected action name identifier argument\");\n    }\n\n    // Only the first argument should have been an identifier, all agent function arguments must be string, number, boolean or null.\n    agentFunctionArgs\n        .filter((arg) => arg.type === \"identifier\")\n        .forEach((arg) => {\n            throw new Error(\n                `invalid action node argument value '${arg.value}', must be string, number, boolean or null`\n            );\n        });\n\n    // Return the action node definition.\n    return {\n        type: \"action\",\n        call: actionNameIdentifier.value,\n        args: agentFunctionArgs.map(({ value }) => value),\n        ...parseAttributeTokens(tokens, stringLiteralPlaceholders)\n    };\n}\n\n/**\n * Creates a condition node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The condition node JSON definition.\n */\nfunction createConditionNode(\n    tokens: string[],\n    stringLiteralPlaceholders: StringLiteralPlaceholders\n): ConditionNodeDefinition {\n    // Parse any node arguments, we should have at least one which will be an identifier argument for the condition name\n    // and agent function to invoke for the condition, all other arguments are to be passed as arguments to that function.\n    const [conditionNameIdentifier, ...agentFunctionArgs] = parseArgumentTokens(tokens, stringLiteralPlaceholders);\n\n    // Our first argument MUST be defined and be an identifier as we require a condition name argument.\n    if (conditionNameIdentifier?.type !== \"identifier\") {\n        throw new Error(\"expected condition name identifier argument\");\n    }\n\n    // Only the first argument should have been an identifier, all agent function arguments must be string, number, boolean or null.\n    agentFunctionArgs\n        .filter((arg) => arg.type === \"identifier\")\n        .forEach((arg) => {\n            throw new Error(\n                `invalid condition node argument value '${arg.value}', must be string, number, boolean or null`\n            );\n        });\n\n    // Return the condition node definition.\n    return {\n        type: \"condition\",\n        call: conditionNameIdentifier.value,\n        args: agentFunctionArgs.map(({ value }) => value),\n        ...parseAttributeTokens(tokens, stringLiteralPlaceholders)\n    };\n}\n\n/**\n * Creates a wait node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The wait node JSON definition.\n */\nfunction createWaitNode(tokens: string[], stringLiteralPlaceholders: StringLiteralPlaceholders): WaitNodeDefinition {\n    let node = { type: \"wait\" } as WaitNodeDefinition;\n\n    // Get the node arguments.\n    const nodeArguments = parseArgumentTokens(tokens, stringLiteralPlaceholders);\n\n    // The arguments of a wait node are optional. We may have:\n    // - No node arguments, in which case the wait will be indefinite until it is aborted.\n    // - One node argument which will be the explicit duration of the wait.\n    // - Two node arguments which define the min and max duration bounds from which a random duration will be picked.\n    if (nodeArguments.length) {\n        // All wait node arguments MUST be of type number and must be integer.\n        nodeArguments\n            .filter((arg) => arg.type !== \"number\" || !arg.isInteger)\n            .forEach(() => {\n                throw new Error(`wait node duration arguments must be integer values`);\n            });\n\n        // We may have:\n        // - One node argument which will be the explicit duration of the wait.\n        // - Two node arguments which define the min and max duration bounds from which a random duration will be picked.\n        // - Too many arguments, which is not valid.\n        if (nodeArguments.length === 1) {\n            // An explicit duration was defined.\n            node.duration = nodeArguments[0].value as number;\n        } else if (nodeArguments.length === 2) {\n            // Min and max duration bounds were defined from which a random duration will be picked.\n            node.duration = [nodeArguments[0].value as number, nodeArguments[1].value as number];\n        } else if (nodeArguments.length > 2) {\n            // An incorrect number of duration arguments were defined.\n            throw new Error(\"invalid number of wait node duration arguments defined\");\n        }\n    }\n\n    // Return the wait node definition.\n    return { ...node, ...parseAttributeTokens(tokens, stringLiteralPlaceholders) };\n}\n\n/**\n * Creates a branch node JSON definition.\n * @param tokens The tree definition tokens.\n * @param stringLiteralPlaceholders The substituted string literal placeholders.\n * @returns The branch node JSON definition.\n */\nfunction createBranchNode(\n    tokens: string[],\n    stringLiteralPlaceholders: StringLiteralPlaceholders\n): BranchNodeDefinition {\n    // Parse any node arguments, we should have one which will be an identifier argument for the root ref.\n    const nodeArguments = parseArgumentTokens(tokens, stringLiteralPlaceholders);\n\n    // We should have only a single identifer argument for a branch node, which is the root ref.\n    if (nodeArguments.length !== 1 || nodeArguments[0].type !== \"identifier\") {\n        throw new Error(\"expected single branch name argument\");\n    }\n\n    // Return the branch node definition.\n    return { type: \"branch\", ref: nodeArguments[0].value };\n}\n", "import { RootNodeDefinition } from \"./BehaviourTreeDefinition\";\nimport { flattenDefinition, isBranchNode, isInteger } from \"./BehaviourTreeDefinitionUtilities\";\nimport { convertMDSLToJSON } from \"./mdsl/MDSLDefinitionParser\";\n\n/**\n * An object representing the result of validating a tree definition.\n */\nexport type DefinitionValidationResult = {\n    /**\n     * A flag defining whether validation succeeded.\n     */\n    succeeded: boolean;\n    /**\n     * A string containing the error message if validation did not succeed.\n     */\n    errorMessage?: string;\n};\n\n/**\n * Validates the specified behaviour tree definition in the form of JSON or MDSL, not taking any globally registered subtrees into consideration.\n * @param definition The behaviour tree definition in the form of JSON or MDSL.\n * @returns An object representing the result of validating the given tree definition.\n */\nexport function validateDefinition(definition: any): DefinitionValidationResult {\n    // The definition must be defined.\n    if (definition === null || typeof definition === \"undefined\") {\n        return createValidationFailureResult(\"definition is null or undefined\");\n    }\n\n    // We are expecting a definition in one of three different forms:\n    // - A string which we will assume is MDSL and we will parse this to JSON before validation.\n    // - An array which we will assume is an array of root node definitions with at least one being the primary root node (no 'id' property)\n    // - An object which we will assume is the primary root node and should not have an 'id' property.\n    if (typeof definition === \"string\") {\n        // The definition is a string which we can assume is MDSL, so attempt to validate it.\n        return validateMDSLDefinition(definition);\n    } else if (typeof definition === \"object\") {\n        // The definition will either be an array (of root node definitions) or an object (the single primary root node definition).\n        return validateJSONDefinition(definition);\n    } else {\n        return createValidationFailureResult(`unexpected definition type of '${typeof definition}'`);\n    }\n}\n\n/**\n * Validates the specified behaviour tree definition in the form of MDSL.\n * @param definition The behaviour tree definition in the form of MDSL.\n * @returns An object representing the result of validating the given tree definition.\n */\nexport function validateMDSLDefinition(definition: string): DefinitionValidationResult {\n    let rootNodeDefinitions;\n\n    // The first thing the we need to do is to attempt to convert our MDSL into JSON.\n    try {\n        // The definition is a string which we can assume is MDSL, so attempt to parse it to a JSON definition in the form of an array of root node definitions.\n        rootNodeDefinitions = convertMDSLToJSON(definition);\n    } catch (error) {\n        // We failed to parse the JSON from the MDSL, this is likely to be the result of it not being a valid MDSL string.\n        return createValidationFailureResult(`invalid MDSL: ${error}`);\n    }\n\n    // Unpack all of the root node definitions into arrays of main ('id' defined) and sub ('id' not defined) root node definitions.\n    const mainRootNodeDefinitions = rootNodeDefinitions.filter(({ id }) => typeof id === \"undefined\");\n    const subRootNodeDefinitions = rootNodeDefinitions.filter(({ id }) => typeof id === \"string\" && id.length > 0);\n\n    // We should ALWAYS have exactly one root node definition without an 'id' property defined, which is out main root node definition.\n    if (mainRootNodeDefinitions.length !== 1) {\n        return createValidationFailureResult(\n            \"expected single unnamed root node at base of definition to act as main root\"\n        );\n    }\n\n    // We should never have duplicate 'id' properties across our sub root node definitions.\n    const subRootNodeIdenitifers: string[] = [];\n    for (const { id } of subRootNodeDefinitions) {\n        // Have we already come across this 'id' property value?\n        if (subRootNodeIdenitifers.includes(id!)) {\n            return createValidationFailureResult(`multiple root nodes found with duplicate name '${id}'`);\n        }\n\n        subRootNodeIdenitifers.push(id!);\n    }\n\n    try {\n        // Validate our branch -> subtree links and check for any circular dependencies, we don't care about checking for broken subtree links here.\n        validateBranchSubtreeLinks(rootNodeDefinitions, false);\n    } catch (exception) {\n        return createValidationFailureResult((exception as Error).message);\n    }\n\n    // Our definition was valid!\n    return { succeeded: true };\n}\n\n/**\n * Validates the specified behaviour tree definition in the form of JSON.\n * @param definition The behaviour tree definition in the form of JSON.\n * @returns An object representing the result of validating the given tree definition.\n */\nexport function validateJSONDefinition(\n    definition: RootNodeDefinition | RootNodeDefinition[]\n): DefinitionValidationResult {\n    // The definition will either be an array (of root node definitions) or an object (the single primary root node definition).\n    const rootNodeDefinitions = Array.isArray(definition) ? definition : [definition];\n\n    // Iterate over our array of root nodes and call validateNode for each, passing an initial depth of 0, wrapped in a try catch to handle validation failures.\n    try {\n        rootNodeDefinitions.forEach((rootNodeDefinition) => validateNode(rootNodeDefinition, 0));\n    } catch (error) {\n        // Handle cases where we have caught a thrown Error and return a failure result with the error message.\n        if (error instanceof Error) {\n            return createValidationFailureResult(error.message);\n        }\n\n        // No idea what happened here!\n        return createValidationFailureResult(`unexpected error: ${error}`);\n    }\n\n    // Unpack all of the root node definitions into arrays of main ('id' defined) and sub ('id' not defined) root node definitions.\n    const mainRootNodeDefinitions = rootNodeDefinitions.filter(({ id }) => typeof id === \"undefined\");\n    const subRootNodeDefinitions = rootNodeDefinitions.filter(({ id }) => typeof id === \"string\" && id.length > 0);\n\n    // We should ALWAYS have exactly one root node definition without an 'id' property defined, which is out main root node definition.\n    if (mainRootNodeDefinitions.length !== 1) {\n        return createValidationFailureResult(\n            \"expected single root node without 'id' property defined to act as main root\"\n        );\n    }\n\n    // We should never have duplicate 'id' properties across our sub root node definitions.\n    const subRootNodeIdenitifers: string[] = [];\n    for (const { id } of subRootNodeDefinitions) {\n        // Have we already come across this 'id' property value?\n        if (subRootNodeIdenitifers.includes(id!)) {\n            return createValidationFailureResult(\n                `multiple root nodes found with duplicate 'id' property value of '${id}'`\n            );\n        }\n\n        subRootNodeIdenitifers.push(id!);\n    }\n\n    try {\n        // Validate our branch -> subtree links and check for any circular dependencies, we don't care about checking for broken subtree links here.\n        validateBranchSubtreeLinks(rootNodeDefinitions, false);\n    } catch (exception) {\n        return createValidationFailureResult((exception as Error).message);\n    }\n\n    // Our definition was valid!\n    return { succeeded: true };\n}\n\n/**\n * Validates the branch -> subtree links across all provided root node definitions.\n * This will not consider branch nodes that reference any globally registered subtrees unless includesGlobalSubtrees\n * is set to true, in which case we will also verify that there are no broken branch -> subtree links.\n * @param rootNodeDefinitions The array of root node definitions.\n * @param includesGlobalSubtrees A flag defining whether the array includes all global subtree root node definitions.\n */\nexport function validateBranchSubtreeLinks(rootNodeDefinitions: RootNodeDefinition[], includesGlobalSubtrees: boolean) {\n    // Create a mapping of root node identifiers to other root nodes that they reference via branch nodes.\n    // Below is an example of a mapping that includes a circular dependency (root => a => b => c => a)\n    // [{ refs: [\"a\", \"b\"] }, { id: \"a\", refs: [\"b\"] }, { id: \"b\", refs: [\"c\"] }, { id: \"c\", refs: [\"a\"] }]\n    const rootNodeMappings: { id: string | undefined; refs: string[] }[] = rootNodeDefinitions.map(\n        (rootNodeDefinition) => ({\n            id: rootNodeDefinition.id,\n            refs: flattenDefinition(rootNodeDefinition)\n                .filter(isBranchNode)\n                .map(({ ref }) => ref)\n        })\n    );\n\n    // A recursive function to walk through the mappings, keeping track of which root nodes we have visited in the form of a path of root node identifiers.\n    const followRefs = (mapping: { id: string | undefined; refs: string[] }, path: (string | undefined)[] = []) => {\n        // Have we found a circular dependency?\n        if (path.includes(mapping.id)) {\n            // We found a circular dependency! Get the bad path of root node identifiers.\n            const badPath = [...path, mapping.id];\n\n            // Create the formatted path value. [undefined, \"a\", \"b\", \"c\", \"a\"] would be formatted as \"a -> b -> c -> a\".\n            const badPathFormatted = badPath.filter((element) => !!element).join(\" => \");\n\n            // No need to continue, we found a circular dependency.\n            throw new Error(`circular dependency found in branch node references: ${badPathFormatted}`);\n        }\n\n        for (const ref of mapping.refs) {\n            // Find the mapping for the root node with an identifer matching the current ref.\n            const subMapping = rootNodeMappings.find(({ id }) => id === ref);\n\n            // We may not have a mapping for this ref, which is normal when we aren't considering all globally registered subtrees.\n            if (subMapping) {\n                followRefs(subMapping, [...path, mapping.id]);\n            } else if (includesGlobalSubtrees) {\n                // We found a reference to a root node that doesn't exist, which is a problem seeing as the root node definitons includes all globally registered subtrees.\n                throw new Error(\n                    mapping.id\n                        ? `subtree '${mapping.id}' has branch node that references root node '${ref}' which has not been defined`\n                        : `primary tree has branch node that references root node '${ref}' which has not been defined`\n                );\n            }\n        }\n    };\n\n    // Start looking for circular dependencies and broken references from the primary root node definition.\n    followRefs(rootNodeMappings.find((mapping) => typeof mapping.id === \"undefined\")!);\n}\n\n/**\n * Validate an object that we expect to be a node definition.\n * @param definition An object that we expect to be a node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateNode(definition: any, depth: number): void {\n    // Every node must be valid object and have a non-empty 'type' string property.\n    if (typeof definition !== \"object\" || typeof definition.type !== \"string\" || definition.type.length === 0) {\n        throw new Error(\n            `node definition is not an object or 'type' property is not a non-empty string at depth '${depth}'`\n        );\n    }\n\n    // How we validate this node definition will depend on its type.\n    switch (definition.type) {\n        case \"action\":\n            validateActionNode(definition, depth);\n            break;\n\n        case \"condition\":\n            validateConditionNode(definition, depth);\n            break;\n\n        case \"wait\":\n            validateWaitNode(definition, depth);\n            break;\n\n        case \"branch\":\n            validateBranchNode(definition, depth);\n            break;\n\n        case \"root\":\n            validateRootNode(definition, depth);\n            break;\n\n        case \"success\":\n            validateSuccessNode(definition, depth);\n            break;\n\n        case \"fail\":\n            validateFailNode(definition, depth);\n            break;\n\n        case \"flip\":\n            validateFlipNode(definition, depth);\n            break;\n\n        case \"repeat\":\n            validateRepeatNode(definition, depth);\n            break;\n\n        case \"retry\":\n            validateRetryNode(definition, depth);\n            break;\n\n        case \"sequence\":\n            validateSequenceNode(definition, depth);\n            break;\n\n        case \"selector\":\n            validateSelectorNode(definition, depth);\n            break;\n\n        case \"parallel\":\n            validateParallelNode(definition, depth);\n            break;\n\n        default:\n            throw new Error(`unexpected node type of '${definition.type}' at depth '${depth}'`);\n    }\n}\n\n/**\n * Validate any attributes for a given node definition.\n * @param definition The node definition.\n * @param depth The depth of the node in the behaviour tree definition.\n */\nfunction validateNodeAttributes(definition: any, depth: number): void {\n    // Validate each of the attribute types for this node.\n    [\"while\", \"until\", \"entry\", \"exit\", \"step\"].forEach((attributeName) => {\n        // Attempt to grab the definition for the current attribute from the node definition.\n        const attributeDefinition = definition[attributeName];\n\n        // All node attributes are optional, so there is nothing to do if the current attribute is not defined.\n        if (typeof attributeDefinition === \"undefined\") {\n            return;\n        }\n\n        // The attribute definition must be an object.\n        if (typeof attributeDefinition !== \"object\") {\n            throw new Error(\n                `expected attribute '${attributeName}' to be an object for '${definition.type}' node at depth '${depth}'`\n            );\n        }\n\n        // The 'call' property must be defined for any attribute definition.\n        if (typeof attributeDefinition.call !== \"string\" || attributeDefinition.call.length === 0) {\n            throw new Error(\n                `expected 'call' property for attribute '${attributeName}' to be a non-empty string for '${definition.type}' node at depth '${depth}'`\n            );\n        }\n\n        // If any node attribute arguments have been defined then they must have been defined in an array.\n        if (typeof attributeDefinition.args !== \"undefined\" && !Array.isArray(attributeDefinition.args)) {\n            throw new Error(\n                `expected 'args' property for attribute '${attributeName}' to be an array for '${definition.type}' node at depth '${depth}'`\n            );\n        }\n    });\n}\n\n/**\n * Validate an object that we expect to be a root node definition.\n * @param definition An object that we expect to be a root node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateRootNode(definition: any, depth: number): void {\n    // Check that the node type is correct.\n    if (definition.type !== \"root\") {\n        throw new Error(\"expected node type of 'root' for root node\");\n    }\n\n    // A root node cannot be the child of another node.\n    if (depth > 0) {\n        throw new Error(\"a root node cannot be the child of another node\");\n    }\n\n    // Check that, if the root node 'id' property is defined, it is a non-empty string.\n    if (typeof definition.id !== \"undefined\" && (typeof definition.id !== \"string\" || definition.id.length === 0)) {\n        throw new Error(\"expected non-empty string for 'id' property if defined for root node\");\n    }\n\n    // A root node is a decorator node, so must have a child node defined.\n    if (typeof definition.child === \"undefined\") {\n        throw new Error(\"expected property 'child' to be defined for root node\");\n    }\n\n    // Validate the node attributes.\n    validateNodeAttributes(definition, depth);\n\n    // Validate the child node of this decorator node.\n    validateNode(definition.child, depth + 1);\n}\n\n/**\n * Validate an object that we expect to be a success node definition.\n * @param definition An object that we expect to be a success node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateSuccessNode(definition: any, depth: number): void {\n    // Check that the node type is correct.\n    if (definition.type !== \"success\") {\n        throw new Error(`expected node type of 'success' for success node at depth '${depth}'`);\n    }\n\n    // A success node is a decorator node, so must have a child node defined.\n    if (typeof definition.child === \"undefined\") {\n        throw new Error(`expected property 'child' to be defined for success node at depth '${depth}'`);\n    }\n\n    // Validate the node attributes.\n    validateNodeAttributes(definition, depth);\n\n    // Validate the child node of this decorator node.\n    validateNode(definition.child, depth + 1);\n}\n\n/**\n * Validate an object that we expect to be a fail node definition.\n * @param definition An object that we expect to be a fail node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateFailNode(definition: any, depth: number): void {\n    // Check that the node type is correct.\n    if (definition.type !== \"fail\") {\n        throw new Error(`expected node type of 'fail' for fail node at depth '${depth}'`);\n    }\n\n    // A fail node is a decorator node, so must have a child node defined.\n    if (typeof definition.child === \"undefined\") {\n        throw new Error(`expected property 'child' to be defined for fail node at depth '${depth}'`);\n    }\n\n    // Validate the node attributes.\n    validateNodeAttributes(definition, depth);\n\n    // Validate the child node of this decorator node.\n    validateNode(definition.child, depth + 1);\n}\n\n/**\n * Validate an object that we expect to be a flip node definition.\n * @param definition An object that we expect to be a flip node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateFlipNode(definition: any, depth: number): void {\n    // Check that the node type is correct.\n    if (definition.type !== \"flip\") {\n        throw new Error(`expected node type of 'flip' for flip node at depth '${depth}'`);\n    }\n\n    // A flip node is a decorator node, so must have a child node defined.\n    if (typeof definition.child === \"undefined\") {\n        throw new Error(`expected property 'child' to be defined for flip node at depth '${depth}'`);\n    }\n\n    // Validate the node attributes.\n    validateNodeAttributes(definition, depth);\n\n    // Validate the child node of this decorator node.\n    validateNode(definition.child, depth + 1);\n}\n\n/**\n * Validate an object that we expect to be a repeat node definition.\n * @param definition An object that we expect to be a repeat node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateRepeatNode(definition: any, depth: number): void {\n    // Check that the node type is correct.\n    if (definition.type !== \"repeat\") {\n        throw new Error(`expected node type of 'repeat' for repeat node at depth '${depth}'`);\n    }\n\n    // A repeat node is a decorator node, so must have a child node defined.\n    if (typeof definition.child === \"undefined\") {\n        throw new Error(`expected property 'child' to be defined for repeat node at depth '${depth}'`);\n    }\n\n    // Check whether an 'iterations' property has been defined, it may not have been if this node is to repeat indefinitely.\n    if (typeof definition.iterations !== \"undefined\") {\n        if (Array.isArray(definition.iterations)) {\n            // Check whether any elements of the array are not integer values.\n            const containsNonInteger = !!definition.iterations.find((value: unknown) => !isInteger(value));\n\n            // If the 'iterations' property is an array then it MUST contain two integer values.\n            if (definition.iterations.length !== 2 || containsNonInteger) {\n                throw new Error(\n                    `expected array containing two integer values for 'iterations' property if defined for repeat node at depth '${depth}'`\n                );\n            }\n        } else if (!isInteger(definition.iterations)) {\n            throw new Error(\n                `expected integer value or array containing two integer values for 'iterations' property if defined for repeat node at depth '${depth}'`\n            );\n        }\n    }\n\n    // Validate the node attributes.\n    validateNodeAttributes(definition, depth);\n\n    // Validate the child node of this decorator node.\n    validateNode(definition.child, depth + 1);\n}\n\n/**\n * Validate an object that we expect to be a retry node definition.\n * @param definition An object that we expect to be a retry node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateRetryNode(definition: any, depth: number): void {\n    // Check that the node type is correct.\n    if (definition.type !== \"retry\") {\n        throw new Error(`expected node type of 'retry' for retry node at depth '${depth}'`);\n    }\n\n    // A retry node is a decorator node, so must have a child node defined.\n    if (typeof definition.child === \"undefined\") {\n        throw new Error(`expected property 'child' to be defined for retry node at depth '${depth}'`);\n    }\n\n    // Check whether an 'attempts' property has been defined, it may not have been if this node is to retry indefinitely.\n    if (typeof definition.attempts !== \"undefined\") {\n        if (Array.isArray(definition.attempts)) {\n            // Check whether any elements of the array are not integer values.\n            const containsNonInteger = !!definition.attempts.find((value: unknown) => !isInteger(value));\n\n            // If the 'attempts' property is an array then it MUST contain two integer values.\n            if (definition.attempts.length !== 2 || containsNonInteger) {\n                throw new Error(\n                    `expected array containing two integer values for 'attempts' property if defined for retry node at depth '${depth}'`\n                );\n            }\n        } else if (!isInteger(definition.attempts)) {\n            throw new Error(\n                `expected integer value or array containing two integer values for 'attempts' property if defined for retry node at depth '${depth}'`\n            );\n        }\n    }\n\n    // Validate the node attributes.\n    validateNodeAttributes(definition, depth);\n\n    // Validate the child node of this decorator node.\n    validateNode(definition.child, depth + 1);\n}\n\n/**\n * Validate an object that we expect to be a branch node definition.\n * @param definition An object that we expect to be a branch node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateBranchNode(definition: any, depth: number): void {\n    // Check that the node type is correct.\n    if (definition.type !== \"branch\") {\n        throw new Error(`expected node type of 'branch' for branch node at depth '${depth}'`);\n    }\n\n    // Check that the branch node 'ref' property is defined and is a non-empty string.\n    if (typeof definition.ref !== \"string\" || definition.ref.length === 0) {\n        throw new Error(`expected non-empty string for 'ref' property for branch node at depth '${depth}'`);\n    }\n\n    // It is invalid to define guard attributes for a branch node as they should be defined on the referenced root node.\n    [\"while\", \"until\"].forEach((attributeName) => {\n        if (typeof definition[attributeName] !== \"undefined\") {\n            throw new Error(\n                `guards should not be defined for branch nodes but guard '${attributeName}' was defined for branch node at depth '${depth}'`\n            );\n        }\n    });\n\n    // It is invalid to define callback attributes for a branch node as they should be defined on the referenced root node.\n    [\"entry\", \"exit\", \"step\"].forEach((attributeName) => {\n        if (typeof definition[attributeName] !== \"undefined\") {\n            throw new Error(\n                `callbacks should not be defined for branch nodes but callback '${attributeName}' was defined for branch node at depth '${depth}'`\n            );\n        }\n    });\n}\n\n/**\n * Validate an object that we expect to be a action node definition.\n * @param definition An object that we expect to be a action node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateActionNode(definition: any, depth: number): void {\n    // Check that the node type is correct.\n    if (definition.type !== \"action\") {\n        throw new Error(`expected node type of 'action' for action node at depth '${depth}'`);\n    }\n\n    // The 'call' property must be defined for a action node definition.\n    if (typeof definition.call !== \"string\" || definition.call.length === 0) {\n        throw new Error(`expected non-empty string for 'call' property of action node at depth '${depth}'`);\n    }\n\n    // If any action function arguments have been defined then they must have been defined in an array.\n    if (typeof definition.args !== \"undefined\" && !Array.isArray(definition.args)) {\n        throw new Error(`expected array for 'args' property if defined for action node at depth '${depth}'`);\n    }\n\n    // Validate the node attributes.\n    validateNodeAttributes(definition, depth);\n}\n\n/**\n * Validate an object that we expect to be a condition node definition.\n * @param definition An object that we expect to be a condition node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateConditionNode(definition: any, depth: number): void {\n    // Check that the node type is correct.\n    if (definition.type !== \"condition\") {\n        throw new Error(`expected node type of 'condition' for condition node at depth '${depth}'`);\n    }\n\n    // The 'call' property must be defined for a condition node definition.\n    if (typeof definition.call !== \"string\" || definition.call.length === 0) {\n        throw new Error(`expected non-empty string for 'call' property of condition node at depth '${depth}'`);\n    }\n\n    // If any condition function arguments have been defined then they must have been defined in an array.\n    if (typeof definition.args !== \"undefined\" && !Array.isArray(definition.args)) {\n        throw new Error(`expected array for 'args' property if defined for condition node at depth '${depth}'`);\n    }\n\n    // Validate the node attributes.\n    validateNodeAttributes(definition, depth);\n}\n\n/**\n * Validate an object that we expect to be a wait node definition.\n * @param definition An object that we expect to be a wait node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateWaitNode(definition: any, depth: number): void {\n    // Check that the node type is correct.\n    if (definition.type !== \"wait\") {\n        throw new Error(`expected node type of 'wait' for wait node at depth '${depth}'`);\n    }\n\n    // Check whether a 'duration' property has been defined, it may not have been if this node is to wait indefinitely.\n    if (typeof definition.duration !== \"undefined\") {\n        if (Array.isArray(definition.duration)) {\n            // Check whether any elements of the array are not integer values.\n            const containsNonInteger = !!definition.duration.find((value: unknown) => !isInteger(value));\n\n            // If the 'duration' property is an array then it MUST contain two integer values.\n            if (definition.duration.length !== 2 || containsNonInteger) {\n                throw new Error(\n                    `expected array containing two integer values for 'duration' property if defined for wait node at depth '${depth}'`\n                );\n            }\n        } else if (!isInteger(definition.duration)) {\n            throw new Error(\n                `expected integer value or array containing two integer values for 'duration' property if defined for wait node at depth '${depth}'`\n            );\n        }\n    }\n\n    // Validate the node attributes.\n    validateNodeAttributes(definition, depth);\n}\n\n/**\n * Validate an object that we expect to be a sequence node definition.\n * @param definition An object that we expect to be a sequence node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateSequenceNode(definition: any, depth: number): void {\n    // Check that the node type is correct.\n    if (definition.type !== \"sequence\") {\n        throw new Error(`expected node type of 'sequence' for sequence node at depth '${depth}'`);\n    }\n\n    // A sequence node is a composite node, so must have a children nodes array defined.\n    if (!Array.isArray(definition.children) || definition.children.length === 0) {\n        throw new Error(`expected non-empty 'children' array to be defined for sequence node at depth '${depth}'`);\n    }\n\n    // Validate the node attributes.\n    validateNodeAttributes(definition, depth);\n\n    // Validate the child nodes of this composite node.\n    definition.children.forEach((child: any) => validateNode(child, depth + 1));\n}\n\n/**\n * Validate an object that we expect to be a selector node definition.\n * @param definition An object that we expect to be a selector node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateSelectorNode(definition: any, depth: number): void {\n    // Check that the node type is correct.\n    if (definition.type !== \"selector\") {\n        throw new Error(`expected node type of 'selector' for selector node at depth '${depth}'`);\n    }\n\n    // A selector node is a composite node, so must have a children nodes array defined.\n    if (!Array.isArray(definition.children) || definition.children.length === 0) {\n        throw new Error(`expected non-empty 'children' array to be defined for selector node at depth '${depth}'`);\n    }\n\n    // Validate the node attributes.\n    validateNodeAttributes(definition, depth);\n\n    // Validate the child nodes of this composite node.\n    definition.children.forEach((child: any) => validateNode(child, depth + 1));\n}\n\n/**\n * Validate an object that we expect to be a parallel node definition.\n * @param definition An object that we expect to be a parallel node definition.\n * @param depth The depth of the node in the definition tree.\n */\nfunction validateParallelNode(definition: any, depth: number): void {\n    // Check that the node type is correct.\n    if (definition.type !== \"parallel\") {\n        throw new Error(`expected node type of 'parallel' for parallel node at depth '${depth}'`);\n    }\n\n    // A parallel node is a composite node, so must have a children nodes array defined.\n    if (!Array.isArray(definition.children) || definition.children.length === 0) {\n        throw new Error(`expected non-empty 'children' array to be defined for parallel node at depth '${depth}'`);\n    }\n\n    // Validate the node attributes.\n    validateNodeAttributes(definition, depth);\n\n    // Validate the child nodes of this composite node.\n    definition.children.forEach((child: any) => validateNode(child, depth + 1));\n}\n\n/**\n * A helper function to create a failure validation result with the given error message.\n * @param errorMessage The validation failure error message.\n * @returns A failure validation result with the given error message.\n */\nfunction createValidationFailureResult(errorMessage: string): DefinitionValidationResult {\n    return { succeeded: false, errorMessage };\n}\n", "import { ActionResult, Agent, GlobalFunction } from \"./Agent\";\nimport { RootNodeDefinition } from \"./BehaviourTreeDefinition\";\n\nexport type InvokerFunction = (args: any[]) => ActionResult;\n\n/**\n * A singleton used to store and lookup registered functions and subtrees.\n */\nexport default class Lookup {\n    /**\n     * The object holding any registered functions keyed on function name.\n     */\n    private static functionTable: { [key: string]: GlobalFunction } = {};\n    /**\n     * The object holding any registered subtree root node definitions keyed on tree name.\n     */\n    private static subtreeTable: { [key: string]: RootNodeDefinition } = {};\n\n    /**\n     * Gets the function with the specified name.\n     * @param name The name of the function.\n     * @returns The function with the specified name.\n     */\n    public static getFunc(name: string): GlobalFunction {\n        return this.functionTable[name];\n    }\n\n    /**\n     * Sets the function with the specified name for later lookup.\n     * @param name The name of the function.\n     * @param func The function.\n     */\n    public static setFunc(name: string, func: GlobalFunction): void {\n        this.functionTable[name] = func;\n    }\n\n    /**\n     * Gets the function invoker for the specified agent and function name.\n     * If a function with the specified name exists on the agent object then it will\n     * be returned, otherwise we will then check the registered functions for a match.\n     * @param agent The agent instance that this behaviour tree is modelling behaviour for.\n     * @param name The function name.\n     * @returns The function invoker for the specified agent and function name.\n     */\n    static getFuncInvoker(agent: Agent, name: string): InvokerFunction | null {\n        // Check whether the agent contains the specified function.\n        const foundOnAgent = agent[name];\n        if (foundOnAgent && typeof foundOnAgent === \"function\") {\n            return (args: any[]): boolean | ActionResult => foundOnAgent.apply(agent, args);\n        }\n\n        // The agent does not contain the specified function but it may have been registered at some point.\n        if (this.functionTable[name] && typeof this.functionTable[name] === \"function\") {\n            return (args: any[]) => this.functionTable[name](agent, ...args.map((arg) => arg.value));\n        }\n\n        // We have no function to invoke.\n        return null;\n    }\n\n    /**\n     * Gets all registered subtree root node definitions.\n     */\n    static getSubtrees(): { [key: string]: RootNodeDefinition } {\n        return this.subtreeTable;\n    }\n\n    /**\n     * Sets the subtree with the specified name for later lookup.\n     * @param name The name of the subtree.\n     * @param subtree The subtree.\n     */\n    static setSubtree(name: string, subtree: RootNodeDefinition) {\n        this.subtreeTable[name] = subtree;\n    }\n\n    /**\n     * Removes the registered function or subtree with the specified name.\n     * @param name The name of the registered function or subtree.\n     */\n    static remove(name: string) {\n        delete this.functionTable[name];\n        delete this.subtreeTable[name];\n    }\n\n    /**\n     * Remove all registered functions and subtrees.\n     */\n    static empty() {\n        this.functionTable = {};\n        this.subtreeTable = {};\n    }\n}\n", "import Node from \"../../nodes/Node\";\n\n/**\n * An exception thrown when evaluating node guard path conditions and a conditions fails.\n */\nexport default class GuardUnsatisifedException extends Error {\n    /**\n     * @param source The node at which a guard condition failed.\n     */\n    constructor(private source: Node) {\n        super(\"A guard path condition has failed\");\n    }\n\n    /**\n     * Gets whether the specified node is the node at which a guard condition failed.\n     * @param node The node to check against the source node.\n     * @returns Whether the specified node is the node at which a guard condition failed.\n     */\n    isSourceNode = (node: Node) => node === this.source;\n}\n", "import { Agent } from \"../../Agent\";\nimport Guard from \"./Guard\";\nimport Node from \"../../nodes/Node\";\nimport GuardUnsatisifedException from \"./GuardUnsatisifedException\";\n\nexport type GuardPathPart = {\n    node: Node;\n    guards: Guard[];\n};\n\n/**\n * Represents a path of node guards along a root-to-leaf tree path.\n */\nexport default class GuardPath {\n    /**\n     * @param nodes An array of objects defining a node instance -> guard link, ordered by node depth.\n     */\n    constructor(private nodes: GuardPathPart[]) {}\n\n    /**\n     * Evaluate guard conditions for all guards in the tree path, moving outwards from the root.\n     * @param agent The agent, required for guard evaluation.\n     * @returns An evaluation results object.\n     */\n    evaluate = (agent: Agent) => {\n        // We need to evaluate guard conditions for nodes up the tree, moving outwards from the root.\n        for (const details of this.nodes) {\n            // There can be multiple guards per node.\n            for (const guard of details.guards) {\n                // Check whether the guard condition passes, and throw an exception if not.\n                if (!guard.isSatisfied(agent)) {\n                    throw new GuardUnsatisifedException(details.node);\n                }\n            }\n        }\n    };\n}\n", "import { BehaviourTreeOptions } from \"../BehaviourTreeOptions\";\nimport State, { AnyState } from \"../State\";\nimport { Agent } from \"../Agent\";\nimport Leaf from \"./leaf/Leaf\";\nimport Attribute from \"../attributes/Attribute\";\nimport Entry from \"../attributes/callbacks/Entry\";\nimport Exit from \"../attributes/callbacks/Exit\";\nimport Step from \"../attributes/callbacks/Step\";\nimport Guard from \"../attributes/guards/Guard\";\nimport GuardPath from \"../attributes/guards/GuardPath\";\nimport GuardUnsatisifedException from \"../attributes/guards/GuardUnsatisifedException\";\n\n/**\n * A base node.\n */\nexport default abstract class Node {\n    /**\n     * The node uid.\n     */\n    private readonly uid: string = createNodeUid();\n    /**\n     * The node state.\n     */\n    private state: AnyState = State.READY;\n    /**\n     * The guard path to evaluate as part of a node update.\n     */\n    private guardPath: GuardPath | undefined;\n\n    /**\n     * @param type The node type.\n     * @param attributes The node attributes.\n     * @param args The node argument definitions.\n     */\n    constructor(private type: string, private attributes: Attribute[], private args: any[]) {}\n\n    /**\n     * Called when the node is being updated.\n     * @param agent The agent.\n     * @param options The behaviour tree options object.\n     */\n    protected abstract onUpdate(agent: Agent, options: BehaviourTreeOptions): void;\n\n    /**\n     * Gets the name of the node.\n     */\n    public abstract getName(): string;\n\n    /**\n     * Gets whether this node is a leaf node.\n     */\n    public abstract isLeafNode: () => this is Leaf;\n\n    /**\n     * Gets/Sets the state of the node.\n     */\n    getState = (): AnyState => this.state;\n    setState = (value: AnyState): void => {\n        this.state = value;\n    };\n\n    /**\n     * Gets the unique id of the node.\n     */\n    getUid = () => this.uid;\n\n    /**\n     * Gets the type of the node.\n     */\n    getType = () => this.type;\n\n    /**\n     * Gets the node attributes.\n     */\n    getAttributes = () => this.attributes;\n\n    /**\n     * Gets the node arguments.\n     */\n    getArguments = () => this.args;\n\n    /**\n     * Gets the node attribute with the specified type, or null if it does not exist.\n     */\n    getAttribute(type: \"entry\" | \"ENTRY\"): Entry;\n    getAttribute(type: \"exit\" | \"EXIT\"): Exit;\n    getAttribute(type: \"step\" | \"STEP\"): Step;\n    getAttribute(type: string): Attribute {\n        return (\n            this.getAttributes().filter((decorator) => decorator.type.toUpperCase() === type.toUpperCase())[0] || null\n        );\n    }\n\n    /**\n     * Gets the node attributes.\n     */\n    getGuardAttributes = (): Guard[] => this.getAttributes().filter((decorator) => decorator.isGuard()) as Guard[];\n\n    /**\n     * Sets the guard path to evaluate as part of a node update.\n     */\n    setGuardPath = (value: GuardPath) => (this.guardPath = value);\n\n    /**\n     * Gets whether a guard path is assigned to this node.\n     */\n    hasGuardPath = () => !!this.guardPath;\n\n    /**\n     * Gets whether this node is in the specified state.\n     * @param value The value to compare to the node state.\n     */\n    public is(value: AnyState): boolean {\n        return this.state === value;\n    }\n\n    /**\n     * Reset the state of the node.\n     */\n    public reset(): void {\n        this.setState(State.READY);\n    }\n\n    /**\n     * Abort the running of this node.\n     * @param agent The agent.\n     */\n    public abort(agent: Agent): void {\n        // There is nothing to do if this node is not in the running state.\n        if (!this.is(State.RUNNING)) {\n            return;\n        }\n\n        // Reset the state of this node.\n        this.reset();\n\n        this.getAttribute(\"exit\")?.callAgentFunction(agent, false, true);\n    }\n\n    /**\n     * Update the node.\n     * @param agent The agent.\n     * @param options The behaviour tree options object.\n     * @returns The result of the update.\n     */\n    public update(agent: Agent, options: BehaviourTreeOptions): void {\n        // If this node is already in a 'SUCCEEDED' or 'FAILED' state then there is nothing to do.\n        if (this.is(State.SUCCEEDED) || this.is(State.FAILED)) {\n            return;\n        }\n\n        try {\n            // Evaluate all of the guard path conditions for the current tree path.\n            this.guardPath!.evaluate(agent);\n\n            // If this node is in the READY state then call the ENTRY for this node if it exists.\n            if (this.is(State.READY)) {\n                this.getAttribute(\"entry\")?.callAgentFunction(agent);\n            }\n\n            this.getAttribute(\"step\")?.callAgentFunction(agent);\n\n            // Do the actual update.\n            this.onUpdate(agent, options);\n\n            // If this node is now in a 'SUCCEEDED' or 'FAILED' state then call the EXIT for this node if it exists.\n            if (this.is(State.SUCCEEDED) || this.is(State.FAILED)) {\n                this.getAttribute(\"exit\")?.callAgentFunction(agent, this.is(State.SUCCEEDED), false);\n            }\n        } catch (error) {\n            // If the error is a GuardUnsatisfiedException then we need to determine if this node is the source.\n            if (error instanceof GuardUnsatisifedException && error.isSourceNode(this)) {\n                // Abort the current node.\n                this.abort(agent);\n\n                // Any node that is the source of an abort will be a failed node.\n                this.setState(State.FAILED);\n            } else {\n                throw error;\n            }\n        }\n    }\n}\n\n/**\n * Create a randomly generated node uid.\n * @returns A randomly generated node uid.\n */\nfunction createNodeUid(): string {\n    var S4 = function () {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    };\n    return S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4();\n}\n", "import Node from \"../Node\";\nimport State from \"../../State\";\nimport { Agent } from \"../../Agent\";\nimport Attribute from \"../../attributes/Attribute\";\n\n/**\n * A decorator node that wraps a single child node.\n */\nexport default abstract class Decorator extends Node {\n    /**\n     * @param type The node type.\n     * @param attributes The node attributes.\n     * @param child The child node.\n     */\n    constructor(type: string, attributes: Attribute[], protected child: Node) {\n        super(type, attributes, []);\n    }\n\n    /**\n     * Gets whether this node is a leaf node.\n     */\n    isLeafNode = () => false;\n\n    /**\n     * Gets the children of this node.\n     */\n    getChildren = () => [this.child];\n\n    /**\n     * Reset the state of the node.\n     */\n    reset = () => {\n        // Reset the state of this node.\n        this.setState(State.READY);\n\n        // Reset the state of the child node.\n        this.child.reset();\n    };\n\n    /**\n     * Abort the running of this node.\n     * @param agent The agent.\n     */\n    abort = (agent: Agent) => {\n        // There is nothing to do if this node is not in the running state.\n        if (!this.is(State.RUNNING)) {\n            return;\n        }\n\n        // Abort the child node.\n        this.child.abort(agent);\n\n        // Reset the state of this node.\n        this.reset();\n\n        this.getAttribute(\"exit\")?.callAgentFunction(agent, false, true);\n    };\n}\n", "import Node from \"../Node\";\nimport Decorator from \"./Decorator\";\nimport State from \"../../State\";\nimport { Agent } from \"../../Agent\";\nimport Attribute from \"../../attributes/Attribute\";\nimport { BehaviourTreeOptions } from \"../../BehaviourTreeOptions\";\n\n/**\n * A Root node.\n * The root node will have a single child.\n */\nexport default class Root extends Decorator {\n    /**\n     * @param attributes The node attributes.\n     * @param child The child node.\n     */\n    constructor(attributes: Attribute[], child: Node) {\n        super(\"root\", attributes, child);\n    }\n\n    /**\n     * Called when the node is being updated.\n     * @param agent The agent.\n     * @param options The behaviour tree options object.\n     */\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\n        // If the child has never been updated or is running then we will need to update it now.\n        if (this.child.getState() === State.READY || this.child.getState() === State.RUNNING) {\n            // Update the child of this node.\n            this.child.update(agent, options);\n        }\n\n        // The state of the root node is the state of its child.\n        this.setState(this.child.getState());\n    }\n\n    /**\n     * Gets the name of the node.\n     */\n    getName = () => \"ROOT\";\n}\n", "import Guard from \"./guards/Guard\";\n\nexport type AttributeDetails = {\n    /** The attribute type. */\n    type: string;\n\n    /** The attribute arguments. */\n    args: any[];\n};\n\n/**\n * A base node attribute.\n */\nexport default abstract class Attribute<TAttributeDetails extends AttributeDetails = AttributeDetails> {\n    /**\n     * @param type The node attribute type.\n     * @param args The array of attribute arguments.\n     */\n    constructor(public type: string, public args: any[]) {}\n\n    /**\n     * Gets the attribute details.\n     */\n    abstract getDetails(): TAttributeDetails;\n\n    /**\n     * Gets whether this attribute is a guard.\n     */\n    abstract isGuard: () => this is Guard;\n}\n", "import { Agent } from \"../../Agent\";\nimport Attribute, { AttributeDetails } from \"../Attribute\";\n\nexport type GuardAttributeDetails = {\n    /** The name of the condition function that determines whether the guard is satisfied. */\n    condition: string;\n} & AttributeDetails;\n\n/**\n * A base node guard attribute.\n */\nexport default abstract class Guard extends Attribute<GuardAttributeDetails> {\n    /**\n     * @param type The node attribute type.\n     * @param args The array of decorator argument definitions.\n     * @param condition The name of the condition function that determines whether the guard is satisfied.\n     */\n    constructor(type: string, args: any[], private condition: string) {\n        super(type, args);\n    }\n\n    /**\n     * Gets the name of the condition function that determines whether the guard is satisfied.\n     */\n    getCondition = () => this.condition;\n\n    /**\n     * Gets whether this attribute is a guard.\n     */\n    isGuard = () => true;\n\n    /**\n     * Gets the attribute details.\n     */\n    getDetails(): GuardAttributeDetails {\n        return {\n            type: this.type,\n            args: this.args,\n            condition: this.getCondition()\n        };\n    }\n\n    /**\n     * Gets whether the guard is satisfied.\n     * @param agent The agent.\n     * @returns Whether the guard is satisfied.\n     */\n    abstract isSatisfied(agent: Agent): boolean;\n}\n", "import Guard from \"./Guard\";\nimport Lookup from \"../../Lookup\";\nimport { Agent } from \"../../Agent\";\n\n/**\n * A WHILE guard which is satisfied as long as the given condition remains true.\n */\nexport default class While extends Guard {\n    /**\n     * @param condition The name of the condition function that determines whether the guard is satisfied.\n     * @param args The array of decorator argument definitions.\n     */\n    constructor(condition: string, args: any[]) {\n        super(\"while\", args, condition);\n    }\n\n    /**\n     * Gets whether the guard is satisfied.\n     * @param agent The agent.\n     * @returns Whether the guard is satisfied.\n     */\n    isSatisfied = (agent: Agent) => {\n        // Attempt to get the invoker for the condition function.\n        const conditionFuncInvoker = Lookup.getFuncInvoker(agent, this.getCondition());\n\n        // The condition function should be defined.\n        if (conditionFuncInvoker === null) {\n            throw new Error(\n                `cannot evaluate node guard as the condition '${this.getCondition()}' function is not defined on the agent and has not been registered`\n            );\n        }\n\n        // Call the condition function to determine whether this guard is satisfied.\n        return !!conditionFuncInvoker(this.args);\n    };\n}\n", "import Guard from \"./Guard\";\nimport Lookup from \"../../Lookup\";\nimport { Agent } from \"../../Agent\";\n\n/**\n * An UNTIL guard which is satisfied as long as the given condition remains false.\n */\nexport default class Until extends Guard {\n    /**\n     * @param condition The name of the condition function that determines whether the guard is satisfied.\n     * @param args The array of decorator argument definitions.\n     */\n    constructor(condition: string, args: any[]) {\n        super(\"until\", args, condition);\n    }\n\n    /**\n     * Gets whether the guard is satisfied.\n     * @param agent The agent.\n     * @returns Whether the guard is satisfied.\n     */\n    isSatisfied = (agent: Agent) => {\n        // Attempt to get the invoker for the condition function.\n        const conditionFuncInvoker = Lookup.getFuncInvoker(agent, this.getCondition());\n\n        // The condition function should be defined.\n        if (conditionFuncInvoker === null) {\n            throw new Error(\n                `cannot evaluate node guard as the condition '${this.getCondition()}' function is not defined on the agent and has not been registered`\n            );\n        }\n\n        // Call the condition function to determine whether this guard is satisfied.\n        return !!!conditionFuncInvoker(this.args);\n    };\n}\n", "import { Agent } from \"../../Agent\";\nimport Attribute, { AttributeDetails } from \"../Attribute\";\n\nexport type CallbackAttributeDetails = {\n    /** The name of the agent function that is called. */\n    functionName: string;\n} & AttributeDetails;\n\n/**\n * A base node callback attribute.\n */\nexport default abstract class Callback extends Attribute<CallbackAttributeDetails> {\n    /**\n     * @param type The node attribute type.\n     * @param args The array of decorator argument definitions.\n     * @param functionName The name of the agent function to call.\n     */\n    constructor(type: string, args: any[], private functionName: string) {\n        super(type, args);\n    }\n\n    /**\n     * Gets the name of the agent function to call.\n     */\n    getFunctionName = () => this.functionName;\n\n    /**\n     * Gets whether this attribute is a guard.\n     */\n    isGuard = () => false;\n\n    /**\n     * Gets the attribute details.\n     */\n    getDetails(): CallbackAttributeDetails {\n        return {\n            type: this.type,\n            args: this.args,\n            functionName: this.getFunctionName()\n        };\n    }\n\n    /**\n     * Attempt to call the agent function that this callback refers to.\n     * @param agent The agent.\n     */\n    abstract callAgentFunction: (agent: Agent, isSuccess: boolean, isAborted: boolean) => void;\n}\n", "import Callback from \"./Callback\";\nimport Lookup from \"../../Lookup\";\nimport { Agent } from \"../../Agent\";\n\n/**\n * An ENTRY callback which defines an agent function to call when the associated node is updated and moves out of running state.\n */\nexport default class Entry extends Callback {\n    /**\n     * @param functionName The name of the agent function to call.\n     * @param args The array of callback argument definitions.\n     */\n    constructor(functionName: string, args: any[]) {\n        super(\"entry\", args, functionName);\n    }\n\n    /**\n     * Attempt to call the agent function that this callback refers to.\n     * @param agent The agent.\n     */\n    callAgentFunction = (agent: Agent) => {\n        // Attempt to get the invoker for the callback function.\n        const callbackFuncInvoker = Lookup.getFuncInvoker(agent, this.getFunctionName());\n\n        // The callback function should be defined.\n        if (callbackFuncInvoker === null) {\n            throw new Error(\n                `cannot call entry function '${this.getFunctionName()}' as is not defined on the agent and has not been registered`\n            );\n        }\n\n        // Call the callback function.\n        callbackFuncInvoker(this.args);\n    };\n}\n", "import Callback from \"./Callback\";\nimport Lookup from \"../../Lookup\";\nimport { Agent } from \"../../Agent\";\n\n/**\n * A STEP callback which defines an agent function to call when the associated node is updated.\n */\nexport default class Step extends Callback {\n    /**\n     * @param functionName The name of the agent function to call.\n     * @param args The array of callback argument definitions.\n     */\n    constructor(functionName: string, args: any[]) {\n        super(\"step\", args, functionName);\n    }\n\n    /**\n     * Attempt to call the agent function that this callback refers to.\n     * @param agent The agent.\n     */\n    callAgentFunction = (agent: Agent) => {\n        // Attempt to get the invoker for the callback function.\n        const callbackFuncInvoker = Lookup.getFuncInvoker(agent, this.getFunctionName());\n\n        // The callback function should be defined.\n        if (callbackFuncInvoker === null) {\n            throw new Error(\n                `cannot call step function '${this.getFunctionName()}' as is not defined on the agent and has not been registered`\n            );\n        }\n\n        // Call the callback function.\n        callbackFuncInvoker(this.args);\n    };\n}\n", "import Callback from \"./Callback\";\nimport Lookup from \"../../Lookup\";\nimport { Agent } from \"../../Agent\";\n\n/**\n * An EXIT callback which defines an agent function to call when the associated node is updated and moves to a finished state or is aborted.\n */\nexport default class Exit extends Callback {\n    /**\n     * @param functionName The name of the agent function to call.\n     * @param args The array of callback argument definitions.\n     */\n    constructor(functionName: string, args: any[]) {\n        super(\"exit\", args, functionName);\n    }\n\n    /**\n     * Attempt to call the agent function that this callback refers to.\n     * @param agent The agent.\n     * @param isSuccess Whether the decorated node was left with a success state.\n     * @param isAborted Whether the decorated node was aborted.\n     */\n    callAgentFunction = (agent: Agent, isSuccess: boolean, isAborted: boolean) => {\n        // Attempt to get the invoker for the callback function.\n        const callbackFuncInvoker = Lookup.getFuncInvoker(agent, this.getFunctionName());\n\n        // The callback function should be defined.\n        if (callbackFuncInvoker === null) {\n            throw new Error(\n                `cannot call exit function '${this.getFunctionName()}' as is not defined on the agent and has not been registered`\n            );\n        }\n\n        // Call the callback function\n        callbackFuncInvoker([{ value: { succeeded: isSuccess, aborted: isAborted } }, ...this.args]);\n    };\n}\n", "import { AnyNodeDefinition, RootNodeDefinition } from \"./BehaviourTreeDefinition\";\nimport GuardPath, { GuardPathPart } from \"./attributes/guards/GuardPath\";\nimport { validateBranchSubtreeLinks } from \"./BehaviourTreeDefinitionValidator\";\nimport Node from \"./nodes/Node\";\nimport Composite from \"./nodes/composite/Composite\";\nimport Decorator from \"./nodes/decorator/Decorator\";\nimport Parallel from \"./nodes/composite/Parallel\";\nimport Selector from \"./nodes/composite/Selector\";\nimport Sequence from \"./nodes/composite/Sequence\";\nimport Lotto from \"./nodes/composite/Lotto\";\nimport Fail from \"./nodes/decorator/Fail\";\nimport Flip from \"./nodes/decorator/Flip\";\nimport Repeat from \"./nodes/decorator/Repeat\";\nimport Retry from \"./nodes/decorator/Retry\";\nimport Root from \"./nodes/decorator/Root\";\nimport Succeed from \"./nodes/decorator/Succeed\";\nimport Action from \"./nodes/leaf/Action\";\nimport Condition from \"./nodes/leaf/Condition\";\nimport Wait from \"./nodes/leaf/Wait\";\nimport Lookup from \"./Lookup\";\nimport Attribute from \"./attributes/Attribute\";\nimport While from \"./attributes/guards/While\";\nimport Until from \"./attributes/guards/Until\";\nimport Entry from \"./attributes/callbacks/Entry\";\nimport Step from \"./attributes/callbacks/Step\";\nimport Exit from \"./attributes/callbacks/Exit\";\n\n/**\n * A type representing any node instance in a behaviour tree.\n */\ntype AnyNode =\n    | Root\n    | Action\n    | Condition\n    | Wait\n    | Sequence\n    | Selector\n    | Lotto\n    | Parallel\n    | Repeat\n    | Retry\n    | Flip\n    | Succeed\n    | Fail;\n\n/**\n * A type defining a mapping of root node identifiers to root node definitions.\n */\ntype RootNodeDefinitionMap = { [key: string | symbol]: RootNodeDefinition };\n\n/**\n * A symbol to use as the main root key in any root node mappings.\n */\nconst MAIN_ROOT_NODE_KEY = Symbol(\"__root__\");\n\n/**\n * Build and populate the root nodes based on the provided definition, assuming that the definition has been validated.\n * @param definition The root node definitions.\n * @returns The built and populated root node definitions.\n */\nexport default function buildRootNode(definition: RootNodeDefinition[]): Root {\n    // Create a mapping of root node identifers to root node definitions, including globally registered subtree root node definitions.\n    const rootNodeDefinitionMap = createRootNodeDefinitionMap(definition);\n\n    // Now that we have all of our root node definitons (those part of the tree definition and those globally\n    // registered) we should validate the definition. This will also double-check that we dont have any circular\n    // dependencies in our branch -> subtree references and that we have no broken branch -> subtree links.\n    validateBranchSubtreeLinks(definition, true);\n\n    // Create our populated tree of node instances, starting with our main root node.\n    const rootNode = nodeFactory(rootNodeDefinitionMap[MAIN_ROOT_NODE_KEY]) as Root;\n\n    // Set a guard path on every leaf of the tree to evaluate as part of its update.\n    applyLeafNodeGuardPaths(rootNode);\n\n    // We only need to return the main root node.\n    return rootNode;\n}\n\n/**\n * A factory function which creates a node instance based on the specified definition.\n * @param definition The node definition.\n * @returns A node instance based on the specified definition.\n */\nfunction nodeFactory(definition: AnyNodeDefinition): AnyNode {\n    // Get the attributes for the node.\n    const attributes = nodeAttributesFactory(definition);\n\n    // Create the node instance based on the definition type.\n    switch (definition.type) {\n        case \"root\":\n            return new Root(attributes, nodeFactory(definition.child));\n\n        // ...\n\n        default:\n            throw new Error(`unexpected node type of '${definition.type}'`);\n    }\n}\n\n/**\n * Creates an array of node attribute instances based on the specified node definition.\n * @param definition The node definition.\n * @returns An array of node attribute instances based on the specified node definition.\n */\nfunction nodeAttributesFactory(definition: AnyNodeDefinition): Attribute[] {\n    const attributes: Attribute[] = [];\n\n    if (definition.while) {\n        attributes.push(new While(definition.while.call, definition.while.args ?? []));\n    }\n\n    if (definition.until) {\n        attributes.push(new Until(definition.until.call, definition.until.args ?? []));\n    }\n\n    if (definition.entry) {\n        attributes.push(new Entry(definition.entry.call, definition.entry.args ?? []));\n    }\n\n    if (definition.step) {\n        attributes.push(new Step(definition.step.call, definition.step.args ?? []));\n    }\n\n    if (definition.exit) {\n        attributes.push(new Exit(definition.exit.call, definition.exit.args ?? []));\n    }\n\n    return attributes;\n}\n\n/**\n * Creates a mapping of root node identifers to root node definitions, mixing in globally registered subtree root node definitions.\n * @param definition The root node definitions.\n * @returns A mapping of root node identifers to root node definitions, including globally registered subtree root node definitions.\n */\nfunction createRootNodeDefinitionMap(definition: RootNodeDefinition[]): RootNodeDefinitionMap {\n    // Create a mapping of root node identifers to root node definitions.\n    const rootNodeMap: RootNodeDefinitionMap = {};\n\n    // Add in any registered subtree root node definitions.\n    for (const [name, rootNodeDefinition] of Object.entries(Lookup.getSubtrees())) {\n        // The name used when registering the subtree will be used as the root node identifier.\n        rootNodeMap[name] = { ...rootNodeDefinition, id: name };\n    }\n\n    // Populate the map with the root node definitions that were included with the tree definition.\n    // We do this after adding any registered subtrees as we want these to take presedence.\n    for (const rootNodeDefinition of definition) {\n        rootNodeMap[rootNodeDefinition.id ?? MAIN_ROOT_NODE_KEY] = rootNodeDefinition;\n    }\n\n    return rootNodeMap;\n}\n\n/**\n * Applies a guard path to every leaf of the tree to evaluate as part of each update.\n * @param root The main root tree node.\n */\nfunction applyLeafNodeGuardPaths(root: Root) {\n    const nodePaths: Node[][] = [];\n\n    const findLeafNodes = (path: Node[], node: Node) => {\n        // Add the current node to the path.\n        path = path.concat(node);\n\n        // Check whether the current node is a leaf node.\n        if (node.isLeafNode()) {\n            nodePaths.push(path);\n        } else {\n            (node as Composite | Decorator).getChildren().forEach((child) => findLeafNodes(path, child));\n        }\n    };\n\n    // Find all leaf node paths, starting from the root.\n    findLeafNodes([], root);\n\n    nodePaths.forEach((path) => {\n        // Each node in the current path will have to be assigned a guard path, working from the root outwards.\n        for (let depth = 0; depth < path.length; depth++) {\n            // Get the node in the path at the current depth.\n            const currentNode = path[depth];\n\n            // The node may already have been assigned a guard path, if so just skip it.\n            if (currentNode.hasGuardPath()) {\n                continue;\n            }\n\n            // Create the guard path for the current node.\n            const guardPath = new GuardPath(\n                path\n                    .slice(0, depth + 1)\n                    .map<GuardPathPart>((node) => ({ node, guards: node.getGuardAttributes() }))\n                    .filter((details) => details.guards.length > 0)\n            );\n\n            // Assign the guard path to the current node.\n            currentNode.setGuardPath(guardPath);\n        }\n    });\n}\n", "import State, { AnyState } from \"./State\";\nimport Lookup from \"./Lookup\";\nimport Node from \"./nodes/Node\";\nimport Root from \"./nodes/decorator/Root\";\nimport Composite from \"./nodes/composite/Composite\";\nimport Decorator from \"./nodes/decorator/Decorator\";\nimport { Agent, GlobalFunction } from \"./Agent\";\nimport { CallbackAttributeDetails } from \"./attributes/callbacks/Callback\";\nimport { GuardAttributeDetails } from \"./attributes/guards/Guard\";\nimport { BehaviourTreeOptions } from \"./BehaviourTreeOptions\";\nimport { convertMDSLToJSON } from \"./mdsl/MDSLDefinitionParser\";\nimport { RootNodeDefinition } from \"./BehaviourTreeDefinition\";\nimport { validateJSONDefinition } from \"./BehaviourTreeDefinitionValidator\";\nimport buildRootNode from \"./BehaviourTreeBuilder\";\n\n// Purely for outside inspection of the tree.\nexport type FlattenedTreeNode = {\n    id: string;\n    type: string;\n    caption: string;\n    state: AnyState;\n    guards: GuardAttributeDetails[];\n    callbacks: CallbackAttributeDetails[];\n    args: any[];\n    parentId: string | null;\n};\n\n/**\n * A representation of a behaviour tree.\n */\nexport class BehaviourTree {\n    /**\n     * The main root tree node.\n     */\n    public readonly rootNode: Root;\n\n    /**\n     * Creates a new instance of the BehaviourTree class.\n     * @param definition The behaviour tree definition.\n     * @param agent The agent instance that this behaviour tree is modelling behaviour for.\n     * @param options The behaviour tree options object.\n     */\n    constructor(\n        definition: string | RootNodeDefinition | RootNodeDefinition[],\n        private agent: Agent,\n        private options: BehaviourTreeOptions = {}\n    ) {\n        // The tree definition must be defined.\n        if (!definition) {\n            throw new Error(\"the tree definition must be a string ro\");\n        }\n\n        // The agent must be defined and not null.\n        if (typeof agent !== \"object\" || agent === null) {\n            throw new Error(\"the agent must be defined and not null\");\n        }\n\n        try {\n            // Parse the behaviour tree definition, create the populated tree of behaviour tree nodes, and get the root.\n            this.rootNode = this._createRootNode(definition);\n        } catch (exception) {\n            // There was an issue in trying build and populate the behaviour tree.\n            throw new Error(`error building tree: ${(exception as Error).message}`);\n        }\n    }\n\n    /**\n     * Gets whether the tree is in the RUNNING state.\n     * @returns true if the tree is in the RUNNING state, otherwise false.\n     */\n    isRunning() {\n        return this.rootNode.getState() === State.RUNNING;\n    }\n\n    /**\n     * Gets the current tree state of SUCCEEDED, FAILED, READY or RUNNING.\n     * @returns The current tree state.\n     */\n    getState() {\n        return this.rootNode.getState();\n    }\n\n    /**\n     * Step the tree.\n     * Carries out a node update that traverses the tree from the root node outwards to any child nodes, skipping those that are already in a resolved state of SUCCEEDED or FAILED.\n     * After being updated, leaf nodes will have a state of SUCCEEDED, FAILED or RUNNING. Leaf nodes that are left in the RUNNING state as part of a tree step will be revisited each\n     * subsequent step until they move into a resolved state of either SUCCEEDED or FAILED, after which execution will move through the tree to the next node with a state of READY.\n     *\n     * Calling this method when the tree is already in a resolved state of SUCCEEDED or FAILED will cause it to be reset before tree traversal begins.\n     */\n    step() {\n        // If the root node has already been stepped to completion then we need to reset it.\n        if (this.rootNode.getState() === State.SUCCEEDED || this.rootNode.getState() === State.FAILED) {\n            this.rootNode.reset();\n        }\n\n        try {\n            this.rootNode.update(this.agent, this.options);\n        } catch (exception) {\n            throw new Error(`error stepping tree: ${(exception as Error).message}`);\n        }\n    }\n\n    /**\n     * Resets the tree from the root node outwards to each nested node, giving each a state of READY.\n     */\n    reset() {\n        this.rootNode.reset();\n    }\n\n    /**\n     * Gets the flattened details of every node in the tree.\n     * @returns The flattened details of every node in the tree.\n     */\n    getFlattenedNodeDetails(): FlattenedTreeNode[] {\n        // Create an empty flattened array of tree nodes.\n        const flattenedTreeNodes: FlattenedTreeNode[] = [];\n\n        /**\n         * Helper function to process a node instance and push details into the flattened tree nodes array.\n         * @param node The current node.\n         * @param parentUid The UID of the node parent, or null if the node is the main root node.\n         */\n        const processNode = (node: Node, parentUid: string | null) => {\n            // Get the guard and callback attribute details for this node.\n            const guards = node\n                .getAttributes()\n                .filter((attribute) => attribute.isGuard())\n                .map((attribute) => attribute.getDetails()) as GuardAttributeDetails[];\n            const callbacks = node\n                .getAttributes()\n                .filter((attribute) => !attribute.isGuard())\n                .map((attribute) => attribute.getDetails()) as CallbackAttributeDetails[];\n\n            // Push the current node into the flattened nodes array.\n            flattenedTreeNodes.push({\n                id: node.getUid(),\n                type: node.getType(),\n                caption: node.getName(),\n                state: node.getState(),\n                guards,\n                callbacks,\n                args: node.getArguments(),\n                parentId: parentUid\n            });\n\n            // Process each of the nodes children if it is not a leaf node.\n            if (!node.isLeafNode()) {\n                (node as Composite | Decorator)\n                    .getChildren()\n                    .forEach((child) => processNode(child, (node as Composite | Decorator).getUid()));\n            }\n        };\n\n        // Convert the nested node structure into a flattened array of node details.\n        processNode(this.rootNode, null);\n\n        return flattenedTreeNodes;\n    }\n\n    /**\n     * Registers the action/condition/guard/callback function or subtree with the given name.\n     * @param name The name of the function or subtree to register.\n     * @param value The function or subtree definition to register.\n     */\n    static register(name: string, value: GlobalFunction | string | RootNodeDefinition) {\n        // Are we going to register a action/condition/guard/callback function?\n        if (typeof value === \"function\") {\n            Lookup.setFunc(name, value);\n            return;\n        }\n\n        // We are not registering an action/condition/guard/callback function, so we must be registering a subtree.\n        if (typeof value === \"string\") {\n            let rootNodeDefinitions: RootNodeDefinition[];\n\n            // We will assume that any string passed in will be a mdsl definition.\n            try {\n                rootNodeDefinitions = convertMDSLToJSON(value);\n            } catch (exception) {\n                throw new Error(`error registering definition, invalid MDSL: ${(exception as Error).message}`);\n            }\n\n            // This function should only ever be called with a definition containing a single unnamed root node.\n            if (rootNodeDefinitions.length != 1 || rootNodeDefinitions[0].id !== null) {\n                throw new Error(\"error registering definition: expected a single unnamed root node\");\n            }\n\n            try {\n                // We should validate the subtree as we don't want invalid subtrees available via the lookup.\n                const { succeeded, errorMessage } = validateJSONDefinition(rootNodeDefinitions[0]);\n\n                // Did our validation fail without error?\n                if (!succeeded) {\n                    throw new Error(errorMessage);\n                }\n            } catch (exception) {\n                throw new Error(`error registering definition: ${(exception as Error).message}`);\n            }\n\n            // Everything seems hunky-dory, register the subtree.\n            Lookup.setSubtree(name, rootNodeDefinitions[0]);\n        } else if (typeof value === \"object\" && !Array.isArray(value)) {\n            // We will assume that any object passed in is a root node definition.\n\n            try {\n                // We should validate the subtree as we don't want invalid subtrees available via the lookup.\n                const { succeeded, errorMessage } = validateJSONDefinition(value);\n\n                // Did our validation fail without error?\n                if (!succeeded) {\n                    throw new Error(errorMessage);\n                }\n            } catch (exception) {\n                throw new Error(`error registering definition: ${(exception as Error).message}`);\n            }\n\n            // Everything seems hunky-dory, register the subtree.\n            Lookup.setSubtree(name, value);\n        } else {\n            throw new Error(\"unexpected value, expected string mdsl definition, root node json definition or function\");\n        }\n    }\n\n    /**\n     * Unregisters the registered action/condition/guard/callback function or subtree with the given name.\n     * @param name The name of the registered action/condition/guard/callback function or subtree to unregister.\n     */\n    static unregister(name: string): void {\n        Lookup.remove(name);\n    }\n\n    /**\n     * Unregister all registered action/condition/guard/callback functions and subtrees.\n     */\n    static unregisterAll(): void {\n        Lookup.empty();\n    }\n\n    /**\n     * Parses a behaviour tree definition and creates a tree of behaviour tree nodes populated at a root.\n     * @param {string | RootNodeDefinition | RootNodeDefinition[]} definition The behaviour tree definition.\n     * @returns The root behaviour tree node.\n     */\n    private _createRootNode(definition: string | RootNodeDefinition | RootNodeDefinition[]): Root {\n        let resolvedDefinition: RootNodeDefinition | RootNodeDefinition[];\n\n        // If the definition is a string then we will assume that it is an mdsl string which needs to be converted to a JSON definition.\n        if (typeof definition === \"string\") {\n            try {\n                resolvedDefinition = convertMDSLToJSON(definition);\n            } catch (exception) {\n                throw new Error(`invalid mdsl definition: ${(exception as Error).message}`);\n            }\n        } else {\n            // The definition is not a string, so we should assume that it is already a JSON definition.\n            resolvedDefinition = definition;\n        }\n\n        // Build and populate the root node.\n        return buildRootNode(Array.isArray(resolvedDefinition) ? resolvedDefinition : [resolvedDefinition]);\n    }\n}\n"],
  "mappings": "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",
  "names": ["State"]
}
