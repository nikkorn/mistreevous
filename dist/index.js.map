{
  "version": 3,
  "sources": ["../src/index.ts", "../src/attributes/guards/guardUnsatisifedException.ts", "../src/attributes/guards/guardPath.ts", "../src/state.ts", "../src/nodes/node.ts", "../src/nodes/leaf/leaf.ts", "../src/lookup.ts", "../src/nodes/leaf/action.ts", "../src/nodes/leaf/condition.ts", "../src/nodes/leaf/wait.ts", "../src/nodes/decorator/decorator.ts", "../src/nodes/decorator/root.ts", "../src/nodes/decorator/repeat.ts", "../src/nodes/decorator/retry.ts", "../src/nodes/decorator/flip.ts", "../src/nodes/decorator/succeed.ts", "../src/nodes/decorator/fail.ts", "../src/nodes/composite/composite.ts", "../src/nodes/composite/lotto.ts", "../src/nodes/composite/selector.ts", "../src/nodes/composite/sequence.ts", "../src/nodes/composite/parallel.ts", "../src/attributes/attribute.ts", "../src/attributes/guards/guard.ts", "../src/attributes/guards/while.ts", "../src/attributes/guards/until.ts", "../src/attributes/callbacks/callback.ts", "../src/attributes/callbacks/entry.ts", "../src/attributes/callbacks/exit.ts", "../src/attributes/callbacks/step.ts", "../src/rootAstNodesBuilder.ts", "../src/behaviourTree.ts"],
  "sourcesContent": ["import BehaviourTree from \"./behaviourTree\";\r\nimport State from \"./state\";\r\n\r\nexport { BehaviourTree, State };\r\n", "import Node from \"../../nodes/node\";\r\n\r\n/**\r\n * An exception thrown when evaluating node guard path conditions and a conditions fails.\r\n */\r\nexport default class GuardUnsatisifedException extends Error {\r\n    /**\r\n     * @param source The node at which a guard condition failed.\r\n     */\r\n    constructor(private source: Node) {\r\n        super(\"A guard path condition has failed\");\r\n    }\r\n\r\n    /**\r\n     * Gets whether the specified node is the node at which a guard condition failed.\r\n     * @param node The node to check against the source node.\r\n     * @returns Whether the specified node is the node at which a guard condition failed.\r\n     */\r\n    isSourceNode = (node: Node) => node === this.source;\r\n}\r\n", "import { Agent } from \"../../agent\";\r\nimport Guard from \"./guard\";\r\nimport Node from \"../../nodes/node\";\r\nimport GuardUnsatisifedException from \"./guardUnsatisifedException\";\r\n\r\nexport type GuardPathPart = {\r\n    node: Node;\r\n    guards: Guard[];\r\n};\r\n\r\n/**\r\n * Represents a path of node guards along a root-to-leaf tree path.\r\n */\r\nexport default class GuardPath {\r\n    /**\r\n     * @param nodes An array of objects defining a node instance -> guard link, ordered by node depth.\r\n     */\r\n    constructor(private nodes: GuardPathPart[]) {}\r\n\r\n    /**\r\n     * Evaluate guard conditions for all guards in the tree path, moving outwards from the root.\r\n     * @param agent The agent, required for guard evaluation.\r\n     * @returns An evaluation results object.\r\n     */\r\n    evaluate = (agent: Agent) => {\r\n        // We need to evaluate guard conditions for nodes up the tree, moving outwards from the root.\r\n        for (const details of this.nodes) {\r\n            // There can be multiple guards per node.\r\n            for (const guard of details.guards) {\r\n                // Check whether the guard condition passes, and throw an exception if not.\r\n                if (!guard.isSatisfied(agent)) {\r\n                    throw new GuardUnsatisifedException(details.node);\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\n", "/**\r\n * Enumeration of node state types.\r\n */\r\nexport const enum State {\r\n    READY = \"mistreevous.ready\",\r\n    RUNNING = \"mistreevous.running\",\r\n    SUCCEEDED = \"mistreevous.succeeded\",\r\n    FAILED = \"mistreevous.failed\"\r\n}\r\n\r\nexport { State as default };\r\n\r\nexport type CompleteState = State.SUCCEEDED | State.FAILED;\r\nexport type AnyState = State.READY | State.RUNNING | CompleteState;\r\n", "import { Agent } from \"../agent\";\r\nimport Attribute from \"../attributes/attribute\";\r\nimport Entry from \"../attributes/callbacks/entry\";\r\nimport Exit from \"../attributes/callbacks/exit\";\r\nimport Step from \"../attributes/callbacks/step\";\r\nimport Guard from \"../attributes/guards/guard\";\r\nimport GuardPath from \"../attributes/guards/guardPath\";\r\nimport GuardUnsatisifedException from \"../attributes/guards/guardUnsatisifedException\";\r\nimport { BehaviourTreeOptions } from \"../behaviourTreeOptions\";\r\nimport { AnyArgument } from \"../rootAstNodesBuilder\";\r\nimport State, { AnyState } from \"../state\";\r\nimport Leaf from \"./leaf/leaf\";\r\n\r\n/**\r\n * A base node.\r\n */\r\nexport default abstract class Node {\r\n    /**\r\n     * The node uid.\r\n     */\r\n    private readonly uid: string = createNodeUid();\r\n    /**\r\n     * The node state.\r\n     */\r\n    private state: AnyState = State.READY;\r\n    /**\r\n     * The guard path to evaluate as part of a node update.\r\n     */\r\n    private guardPath: GuardPath | undefined;\r\n\r\n    /**\r\n     * @param type The node type.\r\n     * @param attributes The node attributes.\r\n     * @param args The node argument definitions.\r\n     */\r\n    constructor(private type: string, private attributes: Attribute[], private args: AnyArgument[]) {}\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected abstract onUpdate(agent: Agent, options: BehaviourTreeOptions): void;\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    public abstract getName(): string;\r\n\r\n    /**\r\n     * Gets whether this node is a leaf node.\r\n     */\r\n    public abstract isLeafNode: () => this is Leaf;\r\n\r\n    /**\r\n     * Gets/Sets the state of the node.\r\n     */\r\n    getState = (): AnyState => this.state;\r\n    setState = (value: AnyState): void => {\r\n        this.state = value;\r\n    };\r\n\r\n    /**\r\n     * Gets the unique id of the node.\r\n     */\r\n    getUid = () => this.uid;\r\n\r\n    /**\r\n     * Gets the type of the node.\r\n     */\r\n    getType = () => this.type;\r\n\r\n    /**\r\n     * Gets the node attributes.\r\n     */\r\n    getAttributes = () => this.attributes;\r\n\r\n    /**\r\n     * Gets the node arguments.\r\n     */\r\n    getArguments = () => this.args;\r\n\r\n    /**\r\n     * Gets the node attribute with the specified type, or null if it does not exist.\r\n     */\r\n    getAttribute(type: \"entry\" | \"ENTRY\"): Entry;\r\n    getAttribute(type: \"exit\" | \"EXIT\"): Exit;\r\n    getAttribute(type: \"step\" | \"STEP\"): Step;\r\n    getAttribute(type: string): Attribute {\r\n        return (\r\n            this.getAttributes().filter((decorator) => decorator.getType().toUpperCase() === type.toUpperCase())[0] ||\r\n            null\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the node attributes.\r\n     */\r\n    getGuardAttributes = (): Guard[] => this.getAttributes().filter((decorator) => decorator.isGuard()) as Guard[];\r\n\r\n    /**\r\n     * Sets the guard path to evaluate as part of a node update.\r\n     */\r\n    setGuardPath = (value: GuardPath) => (this.guardPath = value);\r\n\r\n    /**\r\n     * Gets whether a guard path is assigned to this node.\r\n     */\r\n    hasGuardPath = () => !!this.guardPath;\r\n\r\n    /**\r\n     * Gets whether this node is in the specified state.\r\n     * @param value The value to compare to the node state.\r\n     */\r\n    public is(value: AnyState): boolean {\r\n        return this.state === value;\r\n    }\r\n\r\n    /**\r\n     * Reset the state of the node.\r\n     */\r\n    public reset(): void {\r\n        this.setState(State.READY);\r\n    }\r\n\r\n    /**\r\n     * Abort the running of this node.\r\n     * @param agent The agent.\r\n     */\r\n    public abort(agent: Agent): void {\r\n        // There is nothing to do if this node is not in the running state.\r\n        if (!this.is(State.RUNNING)) {\r\n            return;\r\n        }\r\n\r\n        // Reset the state of this node.\r\n        this.reset();\r\n\r\n        this.getAttribute(\"exit\")?.callAgentFunction(agent, false, true);\r\n    };\r\n\r\n    /**\r\n     * Update the node.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     * @returns The result of the update.\r\n     */\r\n    public update(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // If this node is already in a 'SUCCEEDED' or 'FAILED' state then there is nothing to do.\r\n        if (this.is(State.SUCCEEDED) || this.is(State.FAILED)) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Evaluate all of the guard path conditions for the current tree path.\r\n            this.guardPath!.evaluate(agent);\r\n\r\n            // If this node is in the READY state then call the ENTRY for this node if it exists.\r\n            if (this.is(State.READY)) {\r\n                this.getAttribute(\"entry\")?.callAgentFunction(agent);\r\n            }\r\n\r\n            this.getAttribute(\"step\")?.callAgentFunction(agent);\r\n\r\n            // Do the actual update.\r\n            this.onUpdate(agent, options);\r\n\r\n            // If this node is now in a 'SUCCEEDED' or 'FAILED' state then call the EXIT for this node if it exists.\r\n            if (this.is(State.SUCCEEDED) || this.is(State.FAILED)) {\r\n                this.getAttribute(\"exit\")?.callAgentFunction(agent, this.is(State.SUCCEEDED), false);\r\n            }\r\n        } catch (error) {\r\n            // If the error is a GuardUnsatisfiedException then we need to determine if this node is the source.\r\n            if (error instanceof GuardUnsatisifedException && error.isSourceNode(this)) {\r\n                // Abort the current node.\r\n                this.abort(agent);\r\n\r\n                // Any node that is the source of an abort will be a failed node.\r\n                this.setState(State.FAILED);\r\n            } else {\r\n                throw error;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Create a randomly generated node uid.\r\n * @returns A randomly generated node uid.\r\n */\r\nfunction createNodeUid(): string {\r\n    var S4 = function () {\r\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n    return S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4();\r\n}\r\n", "import Node from \"../node\";\r\n\r\n/**\r\n * A leaf node.\r\n */\r\nexport default abstract class Leaf extends Node {\r\n    /**\r\n     * Gets whether this node is a leaf node.\r\n     */\r\n    isLeafNode = () => true;\r\n}\r\n", "import { ActionResult, Agent, ExitFunctionArg, FunctionArg, GlobalFunction } from \"./agent\";\r\nimport { AnyArgument, RootAstNode } from \"./rootAstNodesBuilder\";\r\n\r\n// Exit callbacks receive their own special type of argument.\r\n// There's probably stricter ways to represent this but it feels overly complex right now.\r\ntype ExitResultArg = { value: ExitFunctionArg };\r\nexport type AnyExitArgument = AnyArgument | ExitResultArg;\r\n\r\nexport type InvokerFunction = (args: AnyExitArgument[]) => ActionResult;\r\n\r\n/**\r\n * A singleton used to store and lookup registered functions and subtrees.\r\n */\r\nexport default class Lookup {\r\n    /**\r\n     * The object holding any registered functions keyed on function name.\r\n     */\r\n    private static functionTable: { [key: string]: GlobalFunction } = {};\r\n    /**\r\n     * The object holding any registered sub-trees keyed on tree name.\r\n     */\r\n    private static subtreeTable: { [key: string]: RootAstNode } = {};\r\n\r\n    /**\r\n     * Gets the function with the specified name.\r\n     * @param name The name of the function.\r\n     * @returns The function with the specified name.\r\n     */\r\n    public static getFunc(name: string): GlobalFunction {\r\n        return this.functionTable[name];\r\n    }\r\n\r\n    /**\r\n     * Sets the function with the specified name for later lookup.\r\n     * @param name The name of the function.\r\n     * @param func The function.\r\n     */\r\n    public static setFunc(name: string, func: GlobalFunction): void {\r\n        this.functionTable[name] = func;\r\n    }\r\n\r\n    /**\r\n     * Gets the function invoker for the specified agent and function name.\r\n     * If a function with the specified name exists on the agent object then it will\r\n     * be returned, otherwise we will then check the registered functions for a match.\r\n     * @param agent The agent instance that this behaviour tree is modelling behaviour for.\r\n     * @param name The function name.\r\n     * @returns The function invoker for the specified agent and function name.\r\n     */\r\n    static getFuncInvoker(agent: Agent, name: string): InvokerFunction | null {\r\n        // Check whether the agent contains the specified function.\r\n        const foundOnAgent = agent[name];\r\n        if (foundOnAgent && typeof foundOnAgent === \"function\") {\r\n            return (args: AnyExitArgument[]): boolean | ActionResult =>\r\n                foundOnAgent.apply(\r\n                    agent,\r\n                    args.map((arg) => arg.value)\r\n                );\r\n        }\r\n\r\n        // The agent does not contain the specified function but it may have been registered at some point.\r\n        if (this.functionTable[name] && typeof this.functionTable[name] === \"function\") {\r\n            return (args: AnyExitArgument[]) => this.functionTable[name](agent, ...args.map((arg) => arg.value));\r\n        }\r\n\r\n        // We have no function to invoke.\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the subtree with the specified name.\r\n     * @param name The name of the subtree.\r\n     * @returns The subtree with the specified name.\r\n     */\r\n    static getSubtree(name: string): RootAstNode {\r\n        return this.subtreeTable[name];\r\n    }\r\n\r\n    /**\r\n     * Sets the subtree with the specified name for later lookup.\r\n     * @param name The name of the subtree.\r\n     * @param subtree The subtree.\r\n     */\r\n    static setSubtree(name: string, subtree: RootAstNode) {\r\n        this.subtreeTable[name] = subtree;\r\n    }\r\n\r\n    /**\r\n     * Removes the registered function or subtree with the specified name.\r\n     * @param name The name of the registered function or subtree.\r\n     */\r\n    static remove(name: string) {\r\n        delete this.functionTable[name];\r\n        delete this.subtreeTable[name];\r\n    }\r\n\r\n    /**\r\n     * Remove all registered functions and subtrees.\r\n     */\r\n    static empty() {\r\n        this.functionTable = {};\r\n        this.subtreeTable = {};\r\n    }\r\n}\r\n", "import Leaf from \"./leaf\";\r\nimport State, { CompleteState } from \"../../state\";\r\nimport Lookup from \"../../lookup\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\nimport { AnyArgument } from \"../../rootAstNodesBuilder\";\r\nimport { BehaviourTreeOptions } from \"../../behaviourTreeOptions\";\r\n\r\n/**\r\n * An Action leaf node.\r\n * This represents an immediate or ongoing state of behaviour.\r\n */\r\nexport default class Action extends Leaf {\r\n    /**\r\n     * @param attributes The node attributes.\r\n     * @param actionName The action name.\r\n     * @param actionArguments The array of action argument definitions.\r\n     */\r\n    constructor(attributes: Attribute[], private actionName: string, private actionArguments: AnyArgument[]) {\r\n        super(\"action\", attributes, actionArguments);\r\n    }\r\n\r\n    /**\r\n     * Whether there is a pending update promise.\r\n     */\r\n    private isUsingUpdatePromise = false;\r\n\r\n    /**\r\n     * The finished state result of an update promise.\r\n     */\r\n    private updatePromiseStateResult: CompleteState | null = null;\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // If the result of this action depends on an update promise then there is nothing to do until\r\n        // it resolves, unless there has been a value set as a result of the update promise resolving.\r\n        if (this.isUsingUpdatePromise) {\r\n            // Check whether the update promise has resolved with a state value.\r\n            if (this.updatePromiseStateResult) {\r\n                // Set the state of this node to match the state returned by the promise.\r\n                this.setState(this.updatePromiseStateResult);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Attempt to get the invoker for the action function.\r\n        const actionFuncInvoker = Lookup.getFuncInvoker(agent, this.actionName);\r\n\r\n        // The action function should be defined.\r\n        if (actionFuncInvoker === null) {\r\n            throw new Error(\r\n                `cannot update action node as the action '${this.actionName}' function is not defined on the agent and has not been registered`\r\n            );\r\n        }\r\n\r\n        // Call the action function, the result of which may be:\r\n        // - The finished state of this action node.\r\n        // - A promise to return a finished node state.\r\n        // - Undefined if the node should remain in the running state.\r\n        const updateResult = actionFuncInvoker(this.actionArguments) as CompleteState | Promise<CompleteState>;\r\n\r\n        if (updateResult instanceof Promise) {\r\n            updateResult.then(\r\n                (result) => {\r\n                    // If 'isUpdatePromisePending' is null then the promise was cleared as it was resolving, probably via an abort of reset.\r\n                    if (!this.isUsingUpdatePromise) {\r\n                        return;\r\n                    }\r\n\r\n                    // Check to make sure the result is a valid finished state.\r\n                    if (result !== State.SUCCEEDED && result !== State.FAILED) {\r\n                        throw new Error(\r\n                            \"action node promise resolved with an invalid value, expected a State.SUCCEEDED or State.FAILED value to be returned\"\r\n                        );\r\n                    }\r\n\r\n                    // Set pending update promise state result to be processed on next update.\r\n                    this.updatePromiseStateResult = result;\r\n                },\r\n                (reason) => {\r\n                    // If 'isUpdatePromisePending' is null then the promise was cleared as it was resolving, probably via an abort of reset.\r\n                    if (!this.isUsingUpdatePromise) {\r\n                        return;\r\n                    }\r\n\r\n                    // Just throw whatever was returned as the rejection argument.\r\n                    throw new Error(reason);\r\n                }\r\n            );\r\n\r\n            // This node will be in the 'RUNNING' state until the update promise resolves.\r\n            this.setState(State.RUNNING);\r\n\r\n            // We are now waiting for the promise returned by the use to resolve before we know what state this node is in.\r\n            this.isUsingUpdatePromise = true;\r\n        } else {\r\n            // Validate the returned value.\r\n            this.validateUpdateResult(updateResult);\r\n\r\n            // Set the state of this node, this may be undefined, which just means that the node is still in the 'RUNNING' state.\r\n            this.setState(updateResult || State.RUNNING);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    getName = () => this.actionName;\r\n\r\n    /**\r\n     * Reset the state of the node.\r\n     */\r\n    reset = () => {\r\n        // Reset the state of this node.\r\n        this.setState(State.READY);\r\n\r\n        // There is no longer an update promise that we care about.\r\n        this.isUsingUpdatePromise = false;\r\n        this.updatePromiseStateResult = null;\r\n    };\r\n\r\n    /**\r\n     * Validate the result of an update function call.\r\n     * @param result The result of an update function call.\r\n     */\r\n    private validateUpdateResult = (result: CompleteState | boolean) => {\r\n        switch (result) {\r\n            case State.SUCCEEDED:\r\n            case State.FAILED:\r\n            case undefined:\r\n                return;\r\n            default:\r\n                throw new Error(\r\n                    `action '${this.actionName}' 'onUpdate' returned an invalid response, expected an optional State.SUCCEEDED or State.FAILED value to be returned`\r\n                );\r\n        }\r\n    };\r\n}\r\n", "import Leaf from \"./leaf\";\r\nimport State from \"../../state\";\r\nimport Lookup from \"../../lookup\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\nimport { AnyArgument } from \"../../rootAstNodesBuilder\";\r\nimport { BehaviourTreeOptions } from \"../../behaviourTreeOptions\";\r\n\r\n/**\r\n * A Condition leaf node.\r\n * This will succeed or fail immediately based on an agent predicate, without moving to the 'RUNNING' state.\r\n */\r\nexport default class Condition extends Leaf {\r\n    /**\r\n     * @param attributes The node attributes.\r\n     * @param conditionName The name of the condition function.\r\n     * @param conditionArguments The array of condition argument definitions.\r\n     */\r\n    constructor(attributes: Attribute[], private conditionName: string, private conditionArguments: AnyArgument[]) {\r\n        super(\"condition\", attributes, conditionArguments);\r\n    }\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // Attempt to get the invoker for the condition function.\r\n        const conditionFuncInvoker = Lookup.getFuncInvoker(agent, this.conditionName);\r\n\r\n        // The condition function should be defined.\r\n        if (conditionFuncInvoker === null) {\r\n            throw new Error(\r\n                `cannot update condition node as the condition '${this.conditionName}' function is not defined on the agent and has not been registered`\r\n            );\r\n        }\r\n\r\n        // Call the condition function to determine the state of this node.\r\n        this.setState(!!conditionFuncInvoker(this.conditionArguments) ? State.SUCCEEDED : State.FAILED);\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    getName = () => this.conditionName;\r\n}\r\n", "import Leaf from \"./leaf\";\r\nimport State from \"../../state\";\r\nimport Attribute from \"../../attributes/attribute\";\r\nimport { Agent } from \"../../agent\";\r\nimport { BehaviourTreeOptions } from \"../../behaviourTreeOptions\";\r\n\r\n/**\r\n * A WAIT node.\r\n * The state of this node will change to SUCCEEDED after a duration of time\r\n */\r\nexport default class Wait extends Leaf {\r\n    /**\r\n     * @param attributes The node attributes.\r\n     * @param duration The duration that this node will wait to succeed in milliseconds, or the earliest if longestDuration is defined.\r\n     * @param longestDuration The longest possible duration in milliseconds that this node will wait to succeed.\r\n     */\r\n    constructor(attributes: Attribute[], private duration: number, private longestDuration: number) {\r\n        super(\"wait\", attributes, []);\r\n    }\r\n\r\n    /**\r\n     * The time in milliseconds at which this node was first updated.\r\n     */\r\n    private initialUpdateTime: number | undefined;\r\n\r\n    /**\r\n     * The duration in milliseconds that this node will be waiting for.\r\n     */\r\n    private waitDuration: number | undefined;\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // If this node is in the READY state then we need to set the initial update time.\r\n        if (this.is(State.READY)) {\r\n            // Set the initial update time.\r\n            this.initialUpdateTime = new Date().getTime();\r\n\r\n            // If a longestDuration value was defined then we will be randomly picking a duration between the\r\n            // shortest and longest duration. If it was not defined, then we will be just using the duration.\r\n            this.waitDuration = this.longestDuration\r\n                ? Math.floor(Math.random() * (this.longestDuration - this.duration + 1) + this.duration)\r\n                : this.duration;\r\n\r\n            // The node is now running until we finish waiting.\r\n            this.setState(State.RUNNING);\r\n        }\r\n\r\n        // Have we waited long enough?\r\n        if (new Date().getTime() >= this.initialUpdateTime! + this.waitDuration!) {\r\n            // We have finished waiting!\r\n            this.setState(State.SUCCEEDED);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    getName = () =>\r\n        `WAIT ${this.longestDuration ? this.duration + \"ms-\" + this.longestDuration + \"ms\" : this.duration + \"ms\"}`;\r\n}\r\n", "import Node from \"../node\";\r\nimport State from \"../../state\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\n\r\n/**\r\n * A decorator node that wraps a single child node.\r\n */\r\nexport default abstract class Decorator extends Node {\r\n    /**\r\n     * @param type The node type.\r\n     * @param attributes The node attributes.\r\n     * @param child The child node.\r\n     */\r\n    constructor(type: string, attributes: Attribute[], protected child: Node) {\r\n        super(type, attributes, []);\r\n    }\r\n\r\n    /**\r\n     * Gets whether this node is a leaf node.\r\n     */\r\n    isLeafNode = () => false;\r\n\r\n    /**\r\n     * Gets the children of this node.\r\n     */\r\n    getChildren = () => [this.child];\r\n\r\n    /**\r\n     * Reset the state of the node.\r\n     */\r\n    reset = () => {\r\n        // Reset the state of this node.\r\n        this.setState(State.READY);\r\n\r\n        // Reset the state of the child node.\r\n        this.child.reset();\r\n    };\r\n\r\n    /**\r\n     * Abort the running of this node.\r\n     * @param agent The agent.\r\n     */\r\n    abort = (agent: Agent) => {\r\n        // There is nothing to do if this node is not in the running state.\r\n        if (!this.is(State.RUNNING)) {\r\n            return;\r\n        }\r\n\r\n        // Abort the child node.\r\n        this.child.abort(agent);\r\n\r\n        // Reset the state of this node.\r\n        this.reset();\r\n\r\n        this.getAttribute(\"exit\")?.callAgentFunction(agent, false, true);\r\n    };\r\n}\r\n", "import Node from \"../node\";\r\nimport Decorator from \"./decorator\";\r\nimport State from \"../../state\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\nimport { BehaviourTreeOptions } from \"../../behaviourTreeOptions\";\r\n\r\n/**\r\n * A Root node.\r\n * The root node will have a single child.\r\n */\r\nexport default class Root extends Decorator {\r\n    /**\r\n     * @param attributes The node attributes.\r\n     * @param child The child node.\r\n     */\r\n    constructor(attributes: Attribute[], child: Node) {\r\n        super(\"root\", attributes, child);\r\n    }\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // If the child has never been updated or is running then we will need to update it now.\r\n        if (this.child.getState() === State.READY || this.child.getState() === State.RUNNING) {\r\n            // Update the child of this node.\r\n            this.child.update(agent, options);\r\n        }\r\n\r\n        // The state of the root node is the state of its child.\r\n        this.setState(this.child.getState());\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    getName = () => \"ROOT\";\r\n}\r\n", "import Node from \"../node\";\r\nimport Decorator from \"./decorator\";\r\nimport State from \"../../state\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\nimport { BehaviourTreeOptions } from \"../../behaviourTreeOptions\";\r\n\r\n/**\r\n * A REPEAT node.\r\n * The node has a single child which can have:\r\n * -- A number of iterations for which to repeat the child node.\r\n * -- An infinite repeat loop if neither an iteration count or a condition function is defined.\r\n * The REPEAT node will stop and have a 'FAILED' state if its child is ever in a 'FAILED' state after an update.\r\n * The REPEAT node will attempt to move on to the next iteration if its child is ever in a 'SUCCEEDED' state.\r\n */\r\nexport default class Repeat extends Decorator {\r\n    /**\r\n     * @param attributes The node attributes.\r\n     * @param iterations The number of iterations to repeat the child node, or the minimum number of iterations if maximumIterations is defined.\r\n     * @param maximumIterations The maximum number of iterations to repeat the child node.\r\n     * @param child The child node.\r\n     */\r\n    constructor(\r\n        attributes: Attribute[],\r\n        private iterations: number | null,\r\n        private maximumIterations: number | null,\r\n        child: Node\r\n    ) {\r\n        super(\"repeat\", attributes, child);\r\n    }\r\n\r\n    /**\r\n     * The number of target iterations to make.\r\n     */\r\n    private targetIterationCount: number | null = null;\r\n\r\n    /**\r\n     * The current iteration count.\r\n     */\r\n    private currentIterationCount: number = 0;\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // If this node is in the READY state then we need to reset the child and the target iteration count.\r\n        if (this.is(State.READY)) {\r\n            // Reset the child node.\r\n            this.child.reset();\r\n\r\n            // Set the target iteration count.\r\n            this.setTargetIterationCount();\r\n        }\r\n\r\n        // Do a check to see if we can iterate. If we can then this node will move into the 'RUNNING' state.\r\n        // If we cannot iterate then we have hit our target iteration count, which means that the node has succeeded.\r\n        if (this.canIterate()) {\r\n            // This node is in the running state and can do its initial iteration.\r\n            this.setState(State.RUNNING);\r\n\r\n            // We may have already completed an iteration, meaning that the child node will be in the SUCCEEDED state.\r\n            // If this is the case then we will have to reset the child node now.\r\n            if (this.child.getState() === State.SUCCEEDED) {\r\n                this.child.reset();\r\n            }\r\n\r\n            // Update the child of this node.\r\n            this.child.update(agent, options);\r\n\r\n            // If the child moved into the FAILED state when we updated it then there is nothing left to do and this node has also failed.\r\n            // If it has moved into the SUCCEEDED state then we have completed the current iteration.\r\n            if (this.child.getState() === State.FAILED) {\r\n                // The child has failed, meaning that this node has failed.\r\n                this.setState(State.FAILED);\r\n\r\n                return;\r\n            } else if (this.child.getState() === State.SUCCEEDED) {\r\n                // We have completed an iteration.\r\n                this.currentIterationCount += 1;\r\n            }\r\n        } else {\r\n            // This node is in the 'SUCCEEDED' state as we cannot iterate any more.\r\n            this.setState(State.SUCCEEDED);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    getName = () => {\r\n        if (this.iterations !== null) {\r\n            return `REPEAT ${\r\n                this.maximumIterations ? this.iterations + \"x-\" + this.maximumIterations + \"x\" : this.iterations + \"x\"\r\n            }`;\r\n        }\r\n\r\n        // Return the default repeat node name.\r\n        return \"REPEAT\";\r\n    };\r\n\r\n    /**\r\n     * Reset the state of the node.\r\n     */\r\n    reset = () => {\r\n        // Reset the state of this node.\r\n        this.setState(State.READY);\r\n\r\n        // Reset the current iteration count.\r\n        this.currentIterationCount = 0;\r\n\r\n        // Reset the child node.\r\n        this.child.reset();\r\n    };\r\n\r\n    /**\r\n     * Gets whether an iteration can be made.\r\n     * @returns Whether an iteration can be made.\r\n     */\r\n    private canIterate = () => {\r\n        if (this.targetIterationCount !== null) {\r\n            // We can iterate as long as we have not reached our target iteration count.\r\n            return this.currentIterationCount < this.targetIterationCount;\r\n        }\r\n\r\n        // If neither an iteration count or a condition function were defined then we can iterate indefinitely.\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Sets the target iteration count.\r\n     */\r\n    private setTargetIterationCount = () => {\r\n        // Are we dealing with a finite number of iterations?\r\n        if (typeof this.iterations === \"number\") {\r\n            // If we have maximumIterations defined then we will want a random iteration count bounded by iterations and maximumIterations.\r\n            this.targetIterationCount =\r\n                typeof this.maximumIterations === \"number\"\r\n                    ? Math.floor(Math.random() * (this.maximumIterations - this.iterations + 1) + this.iterations)\r\n                    : this.iterations;\r\n        } else {\r\n            this.targetIterationCount = null;\r\n        }\r\n    };\r\n}\r\n", "import Node from \"../node\";\r\nimport Decorator from \"./decorator\";\r\nimport State from \"../../state\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\nimport { BehaviourTreeOptions } from \"../../behaviourTreeOptions\";\r\n\r\n/**\r\n * A RETRY node.\r\n * The node has a single child which can have:\r\n * -- A number of iterations for which to repeat the child node.\r\n * -- An infinite repeat loop if neither an iteration count or a condition function is defined.\r\n * The RETRY node will stop and have a 'SUCCEEDED' state if its child is ever in a 'SUCCEEDED' state after an update.\r\n * The RETRY node will attempt to move on to the next iteration if its child is ever in a 'FAILED' state.\r\n */\r\nexport default class Retry extends Decorator {\r\n    /**\r\n     * @param attributes The node attributes.\r\n     * @param iterations The number of iterations to repeat the child node, or the minimum number of iterations if maximumIterations is defined.\r\n     * @param maximumIterations The maximum number of iterations to repeat the child node.\r\n     * @param child The child node.\r\n     */\r\n    constructor(\r\n        attributes: Attribute[],\r\n        private iterations: number | null,\r\n        private maximumIterations: number | null,\r\n        child: Node\r\n    ) {\r\n        super(\"retry\", attributes, child);\r\n    }\r\n\r\n    /**\r\n     * The number of target iterations to make.\r\n     */\r\n    private targetIterationCount: number | null = null;\r\n\r\n    /**\r\n     * The current iteration count.\r\n     */\r\n    private currentIterationCount: number = 0;\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // If this node is in the READY state then we need to reset the child and the target iteration count.\r\n        if (this.is(State.READY)) {\r\n            // Reset the child node.\r\n            this.child.reset();\r\n\r\n            // Set the target iteration count.\r\n            this.setTargetIterationCount();\r\n        }\r\n\r\n        // Do a check to see if we can iterate. If we can then this node will move into the 'RUNNING' state.\r\n        // If we cannot iterate then we have hit our target iteration count, which means that the node has succeeded.\r\n        if (this.canIterate()) {\r\n            // This node is in the running state and can do its initial iteration.\r\n            this.setState(State.RUNNING);\r\n\r\n            // We may have already completed an iteration, meaning that the child node will be in the FAILED state.\r\n            // If this is the case then we will have to reset the child node now.\r\n            if (this.child.getState() === State.FAILED) {\r\n                this.child.reset();\r\n            }\r\n\r\n            // Update the child of this node.\r\n            this.child.update(agent, options);\r\n\r\n            // If the child moved into the SUCCEEDED state when we updated it then there is nothing left to do and this node has also succeeded.\r\n            // If it has moved into the FAILED state then we have completed the current iteration.\r\n            if (this.child.getState() === State.SUCCEEDED) {\r\n                // The child has succeeded, meaning that this node has succeeded.\r\n                this.setState(State.SUCCEEDED);\r\n\r\n                return;\r\n            } else if (this.child.getState() === State.FAILED) {\r\n                // We have completed an iteration.\r\n                this.currentIterationCount += 1;\r\n            }\r\n        } else {\r\n            // This node is in the 'FAILED' state as we cannot iterate any more.\r\n            this.setState(State.FAILED);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    getName = () => {\r\n        if (this.iterations !== null) {\r\n            return `RETRY ${\r\n                this.maximumIterations ? this.iterations + \"x-\" + this.maximumIterations + \"x\" : this.iterations + \"x\"\r\n            }`;\r\n        }\r\n\r\n        // Return the default retry node name.\r\n        return \"RETRY\";\r\n    };\r\n\r\n    /**\r\n     * Reset the state of the node.\r\n     */\r\n    reset = () => {\r\n        // Reset the state of this node.\r\n        this.setState(State.READY);\r\n\r\n        // Reset the current iteration count.\r\n        this.currentIterationCount = 0;\r\n\r\n        // Reset the child node.\r\n        this.child.reset();\r\n    };\r\n\r\n    /**\r\n     * Gets whether an iteration can be made.\r\n     * @returns Whether an iteration can be made.\r\n     */\r\n    canIterate = () => {\r\n        if (this.targetIterationCount !== null) {\r\n            // We can iterate as long as we have not reached our target iteration count.\r\n            return this.currentIterationCount < this.targetIterationCount;\r\n        }\r\n\r\n        // If neither an iteration count or a condition function were defined then we can iterate indefinitely.\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Sets the target iteration count.\r\n     */\r\n    setTargetIterationCount = () => {\r\n        // Are we dealing with a finite number of iterations?\r\n        if (typeof this.iterations === \"number\") {\r\n            // If we have maximumIterations defined then we will want a random iteration count bounded by iterations and maximumIterations.\r\n            this.targetIterationCount =\r\n                typeof this.maximumIterations === \"number\"\r\n                    ? Math.floor(Math.random() * (this.maximumIterations - this.iterations + 1) + this.iterations)\r\n                    : this.iterations;\r\n        } else {\r\n            this.targetIterationCount = null;\r\n        }\r\n    };\r\n}\r\n", "import Decorator from \"./decorator\";\r\nimport State from \"../../state\";\r\nimport Node from \"../node\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\nimport { BehaviourTreeOptions } from \"../../behaviourTreeOptions\";\r\n\r\n/**\r\n * A Flip node.\r\n * This node wraps a single child and will flip the state of the child state.\r\n */\r\nexport default class Flip extends Decorator {\r\n    /**\r\n     * @param attributes The node attributes.\r\n     * @param child The child node.\r\n     */\r\n    constructor(attributes: Attribute[], child: Node) {\r\n        super(\"flip\", attributes, child);\r\n    }\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // If the child has never been updated or is running then we will need to update it now.\r\n        if (this.child.getState() === State.READY || this.child.getState() === State.RUNNING) {\r\n            this.child.update(agent, options);\r\n        }\r\n\r\n        // The state of this node will depend in the state of its child.\r\n        switch (this.child.getState()) {\r\n            case State.RUNNING:\r\n                this.setState(State.RUNNING);\r\n                break;\r\n\r\n            case State.SUCCEEDED:\r\n                this.setState(State.FAILED);\r\n                break;\r\n\r\n            case State.FAILED:\r\n                this.setState(State.SUCCEEDED);\r\n                break;\r\n\r\n            default:\r\n                this.setState(State.READY);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    getName = () => \"FLIP\";\r\n}\r\n", "import Node from \"../node\";\r\nimport Decorator from \"./decorator\";\r\nimport State from \"../../state\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\nimport { BehaviourTreeOptions } from \"../../behaviourTreeOptions\";\r\n\r\n/**\r\n * A Succeed node.\r\n * This node wraps a single child and will always move to the 'SUCCEEDED' state when the child moves to a 'SUCCEEDED' or 'FAILED' state.\r\n */\r\nexport default class Succeed extends Decorator {\r\n    /**\r\n     * @param attributes The node attributes.\r\n     * @param child The child node.\r\n     */\r\n    constructor(attributes: Attribute[], child: Node) {\r\n        super(\"succeed\", attributes, child);\r\n    }\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // If the child has never been updated or is running then we will need to update it now.\r\n        if (this.child.getState() === State.READY || this.child.getState() === State.RUNNING) {\r\n            this.child.update(agent, options);\r\n        }\r\n\r\n        // The state of this node will depend in the state of its child.\r\n        switch (this.child.getState()) {\r\n            case State.RUNNING:\r\n                this.setState(State.RUNNING);\r\n                break;\r\n\r\n            case State.SUCCEEDED:\r\n            case State.FAILED:\r\n                this.setState(State.SUCCEEDED);\r\n                break;\r\n\r\n            default:\r\n                this.setState(State.READY);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    getName = () => \"SUCCEED\";\r\n}\r\n", "import Node from \"../node\";\r\nimport Decorator from \"./decorator\";\r\nimport State from \"../../state\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\nimport { BehaviourTreeOptions } from \"../../behaviourTreeOptions\";\r\n\r\n/**\r\n * A Fail node.\r\n * This node wraps a single child and will always move to the 'FAILED' state when the child moves to a 'SUCCEEDED' or 'FAILED' state.\r\n */\r\nexport default class Fail extends Decorator {\r\n    /**\r\n     * @param attributes The node attributes.\r\n     * @param child The child node.\r\n     */\r\n    constructor(attributes: Attribute[], child: Node) {\r\n        super(\"fail\", attributes, child);\r\n    }\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // If the child has never been updated or is running then we will need to update it now.\r\n        if (this.child.getState() === State.READY || this.child.getState() === State.RUNNING) {\r\n            this.child.update(agent, options);\r\n        }\r\n\r\n        // The state of this node will depend in the state of its child.\r\n        switch (this.child.getState()) {\r\n            case State.RUNNING:\r\n                this.setState(State.RUNNING);\r\n                break;\r\n\r\n            case State.SUCCEEDED:\r\n            case State.FAILED:\r\n                this.setState(State.FAILED);\r\n                break;\r\n\r\n            default:\r\n                this.setState(State.READY);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    getName = () => \"FAIL\";\r\n}\r\n", "import Node from \"../node\";\r\nimport State from \"../../state\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\n\r\n/**\r\n * A composite node that wraps child nodes.\r\n */\r\nexport default abstract class Composite extends Node {\r\n    /**\r\n     * @param type The node type.\r\n     * @param attributes The node attributes.\r\n     * @param children The child nodes.\r\n     */\r\n    constructor(type: string, attributes: Attribute[], protected children: Node[]) {\r\n        super(type, attributes, []);\r\n    }\r\n\r\n    /**\r\n     * Gets whether this node is a leaf node.\r\n     */\r\n    isLeafNode = () => false;\r\n\r\n    /**\r\n     * Gets the children of this node.\r\n     */\r\n    getChildren = () => this.children;\r\n\r\n    /**\r\n     * Reset the state of the node.\r\n     */\r\n    reset = () => {\r\n        // Reset the state of this node.\r\n        this.setState(State.READY);\r\n\r\n        // Reset the state of any child nodes.\r\n        this.getChildren().forEach((child) => child.reset());\r\n    };\r\n\r\n    /**\r\n     * Abort the running of this node.\r\n     * @param agent The agent.\r\n     */\r\n    abort = (agent: Agent) => {\r\n        // There is nothing to do if this node is not in the running state.\r\n        if (!this.is(State.RUNNING)) {\r\n            return;\r\n        }\r\n\r\n        // Abort any child nodes.\r\n        this.getChildren().forEach((child) => child.abort(agent));\r\n\r\n        // Reset the state of this node.\r\n        this.reset();\r\n\r\n        this.getAttribute(\"exit\")?.callAgentFunction(agent, false, true);\r\n    };\r\n}\r\n", "import Node from \"../node\";\r\nimport Composite from \"./composite\";\r\nimport State from \"../../state\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\nimport { BehaviourTreeOptions } from \"../../behaviourTreeOptions\";\r\n\r\n/**\r\n * A LOTTO node.\r\n * A winning child is picked on the initial update of this node, based on ticket weighting.\r\n * The state of this node will match the state of the winning child.\r\n */\r\nexport default class Lotto extends Composite {\r\n    /**\r\n     * @param attributes The node attributes.\r\n     * @param tickets The child node tickets\r\n     * @param children The child nodes.\r\n     */\r\n    constructor(attributes: Attribute[], private tickets: number[], children: Node[]) {\r\n        super(\"lotto\", attributes, children);\r\n    }\r\n\r\n    /**\r\n     * The winning child node.\r\n     */\r\n    private winningChild: Node | undefined;\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // If this node is in the READY state then we need to pick a winning child node.\r\n        if (this.is(State.READY)) {\r\n            // Create a lotto draw.\r\n            const lottoDraw = new LottoDraw();\r\n\r\n            // Add each child of this node to a lotto draw, with each child's corresponding ticket weighting, or a single ticket if not defined.\r\n            this.children.forEach((child, index) => lottoDraw.add(child, this.tickets[index] || 1));\r\n\r\n            // Randomly pick a child based on ticket weighting.\r\n            this.winningChild = lottoDraw.draw();\r\n        }\r\n\r\n        // If the winning child has never been updated or is running then we will need to update it now.\r\n        if (this.winningChild!.getState() === State.READY || this.winningChild!.getState() === State.RUNNING) {\r\n            this.winningChild!.update(agent, options);\r\n        }\r\n\r\n        // The state of the lotto node is the state of its winning child.\r\n        // Note: We're dirty casting away undefined like this ignores the fact lotto.draw() can return undefined...\r\n        this.setState(this.winningChild!.getState());\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    getName = () => (this.tickets.length ? `LOTTO [${this.tickets.join(\",\")}]` : \"LOTTO\");\r\n}\r\n\r\ntype Participant = { participant: Node; tickets: number };\r\n\r\n/**\r\n * Represents a lotto draw.\r\n */\r\nclass LottoDraw {\r\n    /**\r\n     * The participants\r\n     */\r\n    private readonly participants: Participant[] = [];\r\n\r\n    /**\r\n     * Add a participant.\r\n     * @param participant The participant.\r\n     * @param tickets The number of tickets held by the participant.\r\n     */\r\n    add = (participant: Node, tickets: number) => {\r\n        this.participants.push({ participant, tickets });\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Draw a winning participant.\r\n     * @returns A winning participant.\r\n     */\r\n    draw = () => {\r\n        // We cannot do anything if there are no participants.\r\n        if (!this.participants.length) {\r\n            throw new Error(\"cannot draw a lotto winner when there are no participants\");\r\n        }\r\n\r\n        const pickable: Node[] = [];\r\n\r\n        this.participants.forEach(({ participant, tickets }) => {\r\n            for (let ticketCount = 0; ticketCount < tickets; ticketCount++) {\r\n                pickable.push(participant);\r\n            }\r\n        });\r\n\r\n        return this.getRandomItem(pickable);\r\n    };\r\n\r\n    /**\r\n     * Get a random item form an array.\r\n     * @param items Th array of items.\r\n     * @returns The randomly picked item.\r\n     */\r\n    getRandomItem = <T>(items: T[]): T | undefined => {\r\n        // We cant pick a random item from an empty array.\r\n        if (!items.length) {\r\n            return undefined;\r\n        }\r\n\r\n        // Return a random item.\r\n        return items[Math.floor(Math.random() * items.length)];\r\n    };\r\n}\r\n", "import Composite from \"./composite\";\r\nimport Node from \"../node\";\r\nimport State from \"../../state\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\nimport { BehaviourTreeOptions } from \"../../behaviourTreeOptions\";\r\n\r\n/**\r\n * A SELECTOR node.\r\n * The child nodes are executed in sequence until one succeeds or all fail.\r\n */\r\nexport default class Selector extends Composite {\r\n    /**\r\n     * @param attributes The node attributes.\r\n     * @param children The child nodes.\r\n     */\r\n    constructor(attributes: Attribute[], protected children: Node[]) {\r\n        super(\"selector\", attributes, children);\r\n    }\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // Iterate over all of the children of this node.\r\n        for (const child of this.children) {\r\n            // If the child has never been updated or is running then we will need to update it now.\r\n            if (child.getState() === State.READY || child.getState() === State.RUNNING) {\r\n                // Update the child of this node.\r\n                child.update(agent, options);\r\n            }\r\n\r\n            // If the current child has a state of 'SUCCEEDED' then this node is also a 'SUCCEEDED' node.\r\n            if (child.getState() === State.SUCCEEDED) {\r\n                // This node is a 'SUCCEEDED' node.\r\n                this.setState(State.SUCCEEDED);\r\n\r\n                // There is no need to check the rest of the selector nodes.\r\n                return;\r\n            }\r\n\r\n            // If the current child has a state of 'FAILED' then we should move on to the next child.\r\n            if (child.getState() === State.FAILED) {\r\n                // Find out if the current child is the last one in the selector.\r\n                // If it is then this sequence node has also failed.\r\n                if (this.children.indexOf(child) === this.children.length - 1) {\r\n                    // This node is a 'FAILED' node.\r\n                    this.setState(State.FAILED);\r\n\r\n                    // There is no need to check the rest of the selector as we have completed it.\r\n                    return;\r\n                } else {\r\n                    // The child node failed, try the next one.\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            // The node should be in the 'RUNNING' state.\r\n            if (child.getState() === State.RUNNING) {\r\n                // This node is a 'RUNNING' node.\r\n                this.setState(State.RUNNING);\r\n\r\n                // There is no need to check the rest of the selector as the current child is still running.\r\n                return;\r\n            }\r\n\r\n            // The child node was not in an expected state.\r\n            throw new Error(\"child node was not in an expected state.\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    getName = () => \"SELECTOR\";\r\n}\r\n", "import Composite from \"./composite\";\r\nimport Node from \"../node\";\r\nimport State from \"../../state\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\nimport { BehaviourTreeOptions } from \"../../behaviourTreeOptions\";\r\n\r\n/**\r\n * A SEQUENCE node.\r\n * The child nodes are executed in sequence until one fails or all succeed.\r\n */\r\nexport default class Sequence extends Composite {\r\n    /**\r\n     * @param attributes The node attributes.\r\n     * @param children The child nodes.\r\n     */\r\n    constructor(attributes: Attribute[], protected children: Node[]) {\r\n        super(\"sequence\", attributes, children);\r\n    }\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // Iterate over all of the children of this node.\r\n        for (const child of this.children) {\r\n            // If the child has never been updated or is running then we will need to update it now.\r\n            if (child.getState() === State.READY || child.getState() === State.RUNNING) {\r\n                // Update the child of this node.\r\n                child.update(agent, options);\r\n            }\r\n\r\n            // If the current child has a state of 'SUCCEEDED' then we should move on to the next child.\r\n            if (child.getState() === State.SUCCEEDED) {\r\n                // Find out if the current child is the last one in the sequence.\r\n                // If it is then this sequence node has also succeeded.\r\n                if (this.children.indexOf(child) === this.children.length - 1) {\r\n                    // This node is a 'SUCCEEDED' node.\r\n                    this.setState(State.SUCCEEDED);\r\n\r\n                    // There is no need to check the rest of the sequence as we have completed it.\r\n                    return;\r\n                } else {\r\n                    // The child node succeeded, but we have not finished the sequence yet.\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            // If the current child has a state of 'FAILED' then this node is also a 'FAILED' node.\r\n            if (child.getState() === State.FAILED) {\r\n                // This node is a 'FAILED' node.\r\n                this.setState(State.FAILED);\r\n\r\n                // There is no need to check the rest of the sequence.\r\n                return;\r\n            }\r\n\r\n            // The node should be in the 'RUNNING' state.\r\n            if (child.getState() === State.RUNNING) {\r\n                // This node is a 'RUNNING' node.\r\n                this.setState(State.RUNNING);\r\n\r\n                // There is no need to check the rest of the sequence as the current child is still running.\r\n                return;\r\n            }\r\n\r\n            // The child node was not in an expected state.\r\n            throw new Error(\"child node was not in an expected state.\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    getName = () => \"SEQUENCE\";\r\n}\r\n", "import Composite from \"./composite\";\r\nimport State from \"../../state\";\r\nimport Node from \"../node\";\r\nimport { Agent } from \"../../agent\";\r\nimport Attribute from \"../../attributes/attribute\";\r\nimport { BehaviourTreeOptions } from \"../../behaviourTreeOptions\";\r\n\r\n/**\r\n * A PARALLEL node.\r\n * The child nodes are executed concurrently until one fails or all succeed.\r\n */\r\nexport default class Parallel extends Composite {\r\n    /**\r\n     * @param attributes The node attributes.\r\n     * @param children The child nodes.\r\n     */\r\n    constructor(attributes: Attribute[], children: Node[]) {\r\n        super(\"parallel\", attributes, children);\r\n    }\r\n\r\n    /**\r\n     * Called when the node is being updated.\r\n     * @param agent The agent.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    protected onUpdate(agent: Agent, options: BehaviourTreeOptions): void {\r\n        // Keep a count of the number of succeeded child nodes.\r\n        let succeededCount = 0;\r\n\r\n        let hasChildFailed = false;\r\n\r\n        // Iterate over all of the children of this node.\r\n        for (const child of this.children) {\r\n            // If the child has never been updated or is running then we will need to update it now.\r\n            if (child.getState() === State.READY || child.getState() === State.RUNNING) {\r\n                // Update the child of this node.\r\n                child.update(agent, options);\r\n            }\r\n\r\n            // If the current child has a state of 'SUCCEEDED' then we should move on to the next child.\r\n            if (child.getState() === State.SUCCEEDED) {\r\n                // The child node has succeeded, keep track of this to determine if all children have.\r\n                succeededCount++;\r\n\r\n                // The child node succeeded, but we have not finished checking every child node yet.\r\n                continue;\r\n            }\r\n\r\n            // If the current child has a state of 'FAILED' then this node is also a 'FAILED' node.\r\n            if (child.getState() === State.FAILED) {\r\n                hasChildFailed = true;\r\n\r\n                // There is no need to check the rest of the children.\r\n                break;\r\n            }\r\n\r\n            // The node should be in the 'RUNNING' state.\r\n            if (child.getState() !== State.RUNNING) {\r\n                // The child node was not in an expected state.\r\n                throw new Error(\"child node was not in an expected state.\");\r\n            }\r\n        }\r\n\r\n        if (hasChildFailed) {\r\n            // This node is a 'FAILED' node.\r\n            this.setState(State.FAILED);\r\n\r\n            // Abort every running child.\r\n            for (const child of this.children) {\r\n                if (child.getState() === State.RUNNING) {\r\n                    child.abort(agent);\r\n                }\r\n            }\r\n        } else {\r\n            // If all children have succeeded then this node has also succeeded, otherwise it is still running.\r\n            this.setState(succeededCount === this.children.length ? State.SUCCEEDED : State.RUNNING);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the name of the node.\r\n     */\r\n    getName = () => \"PARALLEL\";\r\n}\r\n", "import { AnyArgument } from \"../rootAstNodesBuilder\";\r\nimport Guard from \"./guards/guard\";\r\n\r\nexport type AttributeDetails = {\r\n    type: string;\r\n    arguments: AnyArgument[];\r\n};\r\n\r\n/**\r\n * A base node attribute.\r\n */\r\nexport default abstract class Attribute {\r\n    /**\r\n     * @param type The node attribute type.\r\n     * @param args The array of attribute argument definitions.\r\n     */\r\n    constructor(protected type: string, protected args: AnyArgument[]) {}\r\n\r\n    /**\r\n     * Gets the type of the attribute.\r\n     */\r\n    getType = () => this.type;\r\n\r\n    /**\r\n     * Gets the array of attribute argument definitions.\r\n     */\r\n    getArguments = () => this.args;\r\n\r\n    /**\r\n     * Gets the attribute details.\r\n     */\r\n    getDetails = (): AttributeDetails => ({\r\n        type: this.getType(),\r\n        arguments: this.getArguments()\r\n    });\r\n\r\n    /**\r\n     * Gets whether this attribute is a guard.\r\n     */\r\n    abstract isGuard: () => this is Guard;\r\n}\r\n", "import { Agent } from \"../../agent\";\r\nimport Attribute from \"../attribute\";\r\n\r\n/**\r\n * A base node guard attribute.\r\n */\r\nexport default abstract class Guard extends Attribute {\r\n    /**\r\n     * Gets whether this attribute is a guard.\r\n     */\r\n    isGuard = (): this is Guard => true;\r\n\r\n    /**\r\n     * Gets whether the guard is satisfied.\r\n     * @param agent The agent.\r\n     * @returns Whether the guard is satisfied.\r\n     */\r\n    abstract isSatisfied(agent: Agent): boolean;\r\n}\r\n", "import Guard from \"./guard\";\r\nimport Lookup from \"../../lookup\";\r\nimport { Agent } from \"../../agent\";\r\nimport { AnyArgument } from \"../../rootAstNodesBuilder\";\r\n\r\n/**\r\n * A WHILE guard which is satisfied as long as the given condition remains true.\r\n */\r\nexport default class While extends Guard {\r\n    /**\r\n     * @param condition The name of the condition function that determines whether the guard is satisfied.\r\n     * @param args The array of decorator argument definitions.\r\n     */\r\n    constructor(private condition: string, args: AnyArgument[]) {\r\n        super(\"while\", args);\r\n    }\r\n\r\n    /**\r\n     * Gets the condition of the guard.\r\n     */\r\n    getCondition = () => this.condition;\r\n\r\n    /**\r\n     * Gets the decorator details.\r\n     */\r\n    getDetails = () => {\r\n        return {\r\n            type: this.getType(),\r\n            isGuard: this.isGuard(),\r\n            condition: this.getCondition(),\r\n            arguments: this.getArguments()\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Gets whether the guard is satisfied.\r\n     * @param agent The agent.\r\n     * @returns Whether the guard is satisfied.\r\n     */\r\n    isSatisfied = (agent: Agent) => {\r\n        // Attempt to get the invoker for the condition function.\r\n        const conditionFuncInvoker = Lookup.getFuncInvoker(agent, this.condition);\r\n\r\n        // The condition function should be defined.\r\n        if (conditionFuncInvoker === null) {\r\n            throw new Error(\r\n                `cannot evaluate node guard as the condition '${this.condition}' function is not defined on the agent and has not been registered`\r\n            );\r\n        }\r\n\r\n        // Call the condition function to determine whether this guard is satisfied.\r\n        return !!conditionFuncInvoker(this.args);\r\n    };\r\n}\r\n", "import Guard from \"./guard\";\r\nimport Lookup from \"../../lookup\";\r\nimport { Agent } from \"../../agent\";\r\nimport { AnyArgument } from \"../../rootAstNodesBuilder\";\r\n\r\n/**\r\n * An UNTIL guard which is satisfied as long as the given condition remains false.\r\n */\r\nexport default class Until extends Guard {\r\n    /**\r\n     * @param condition The name of the condition function that determines whether the guard is satisfied.\r\n     * @param args The array of decorator argument definitions.\r\n     */\r\n    constructor(private condition: string, args: AnyArgument[]) {\r\n        super(\"until\", args);\r\n    }\r\n\r\n    /**\r\n     * Gets the condition of the guard.\r\n     */\r\n    getCondition = () => this.condition;\r\n\r\n    /**\r\n     * Gets the decorator details.\r\n     */\r\n    getDetails = () => {\r\n        return {\r\n            type: this.getType(),\r\n            isGuard: this.isGuard(),\r\n            condition: this.getCondition(),\r\n            arguments: this.getArguments()\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Gets whether the guard is satisfied.\r\n     * @param agent The agent.\r\n     * @returns Whether the guard is satisfied.\r\n     */\r\n    isSatisfied = (agent: Agent) => {\r\n        // Attempt to get the invoker for the condition function.\r\n        const conditionFuncInvoker = Lookup.getFuncInvoker(agent, this.condition);\r\n\r\n        // The condition function should be defined.\r\n        if (conditionFuncInvoker === null) {\r\n            throw new Error(\r\n                `cannot evaluate node guard as the condition '${this.condition}' function is not defined on the agent and has not been registered`\r\n            );\r\n        }\r\n\r\n        // Call the condition function to determine whether this guard is satisfied.\r\n        return !!!conditionFuncInvoker(this.args);\r\n    };\r\n}\r\n", "import { Agent } from \"../../agent\";\r\nimport Attribute from \"../attribute\";\r\n\r\n/**\r\n * A base node callback attribute.\r\n */\r\nexport default abstract class Callback extends Attribute {\r\n    /**\r\n     * Gets whether this attribute is a guard.\r\n     */\r\n    isGuard = () => false;\r\n\r\n    /**\r\n     * Attempt to call the agent function that this callback refers to.\r\n     * @param agent The agent.\r\n     */\r\n    abstract callAgentFunction: (agent: Agent, isSuccess: boolean, isAborted: boolean) => void;\r\n}\r\n", "import Callback from \"./callback\";\r\nimport Lookup from \"../../lookup\";\r\nimport { Agent } from \"../../agent\";\r\nimport { AnyArgument } from \"../../rootAstNodesBuilder\";\r\n\r\n/**\r\n * An ENTRY callback which defines an agent function to call when the associated node is updated and moves out of running state.\r\n */\r\nexport default class Entry extends Callback {\r\n    /**\r\n     * @param functionName The name of the agent function to call.\r\n     * @param args The array of callback argument definitions.\r\n     */\r\n    constructor(private functionName: string, args: AnyArgument[]) {\r\n        super(\"entry\", args);\r\n    }\r\n\r\n    /**\r\n     * Gets the function name.\r\n     */\r\n    getFunctionName = () => this.functionName;\r\n\r\n    /**\r\n     * Gets the callback details.\r\n     */\r\n    getDetails = () => {\r\n        return {\r\n            type: this.getType(),\r\n            isGuard: this.isGuard(),\r\n            functionName: this.getFunctionName(),\r\n            arguments: this.getArguments()\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Attempt to call the agent function that this callback refers to.\r\n     * @param agent The agent.\r\n     */\r\n    callAgentFunction = (agent: Agent) => {\r\n        // Attempt to get the invoker for the callback function.\r\n        const callbackFuncInvoker = Lookup.getFuncInvoker(agent, this.functionName);\r\n\r\n        // The callback function should be defined.\r\n        if (callbackFuncInvoker === null) {\r\n            throw new Error(\r\n                `cannot call entry function '${this.functionName}' as is not defined on the agent and has not been registered`\r\n            );\r\n        }\r\n\r\n        // Call the callback function.\r\n        callbackFuncInvoker(this.args);\r\n    };\r\n}\r\n", "import Callback from \"./callback\";\r\nimport Lookup, { AnyExitArgument } from \"../../lookup\";\r\nimport { Agent } from \"../../agent\";\r\nimport { AnyArgument } from \"../../rootAstNodesBuilder\";\r\n\r\n/**\r\n * An EXIT callback which defines an agent function to call when the associated node is updated and moves to a finished state or is aborted.\r\n */\r\nexport default class Exit extends Callback {\r\n    /**\r\n     * @param functionName The name of the agent function to call.\r\n     * @param args The array of callback argument definitions.\r\n     */\r\n    constructor(private functionName: string, args: AnyArgument[]) {\r\n        super(\"exit\", args);\r\n    }\r\n\r\n    /**\r\n     * Gets the function name.\r\n     */\r\n    getFunctionName = () => this.functionName;\r\n\r\n    /**\r\n     * Gets the callback details.\r\n     */\r\n    getDetails = () => {\r\n        return {\r\n            type: this.getType(),\r\n            isGuard: this.isGuard(),\r\n            functionName: this.getFunctionName(),\r\n            arguments: this.getArguments()\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Attempt to call the agent function that this callback refers to.\r\n     * @param agent The agent.\r\n     * @param isSuccess Whether the decorated node was left with a success state.\r\n     * @param isAborted Whether the decorated node was aborted.\r\n     */\r\n    callAgentFunction = (agent: Agent, isSuccess: boolean, isAborted: boolean) => {\r\n        // Attempt to get the invoker for the callback function.\r\n        const callbackFuncInvoker = Lookup.getFuncInvoker(agent, this.functionName);\r\n\r\n        // The callback function should be defined.\r\n        if (callbackFuncInvoker === null) {\r\n            throw new Error(\r\n                `cannot call exit function '${this.functionName}' as is not defined on the agent and has not been registered`\r\n            );\r\n        }\r\n\r\n        // Call the callback function\r\n        callbackFuncInvoker([{ value: { succeeded: isSuccess, aborted: isAborted } }, ...this.args]);\r\n    };\r\n}\r\n", "import Callback from \"./callback\";\r\nimport Lookup from \"../../lookup\";\r\nimport { Agent } from \"../../agent\";\r\nimport { AnyArgument } from \"../../rootAstNodesBuilder\";\r\n\r\n/**\r\n * A STEP callback which defines an agent function to call when the associated node is updated.\r\n */\r\nexport default class Step extends Callback {\r\n    /**\r\n     * @param functionName The name of the agent function to call.\r\n     * @param args The array of callback argument definitions.\r\n     */\r\n    constructor(private functionName: string, args: AnyArgument[]) {\r\n        super(\"exit\", args);\r\n    }\r\n\r\n    /**\r\n     * Gets the function name.\r\n     */\r\n    getFunctionName = () => this.functionName;\r\n\r\n    /**\r\n     * Gets the callback details.\r\n     */\r\n    getDetails = () => {\r\n        return {\r\n            type: this.getType(),\r\n            isGuard: this.isGuard(),\r\n            functionName: this.getFunctionName(),\r\n            arguments: this.getArguments()\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Attempt to call the agent function that this callback refers to.\r\n     * @param agent The agent.\r\n     */\r\n    callAgentFunction = (agent: Agent) => {\r\n        // Attempt to get the invoker for the callback function.\r\n        const callbackFuncInvoker = Lookup.getFuncInvoker(agent, this.functionName);\r\n\r\n        // The callback function should be defined.\r\n        if (callbackFuncInvoker === null) {\r\n            throw new Error(\r\n                `cannot call step function '${this.functionName}' as is not defined on the agent and has not been registered`\r\n            );\r\n        }\r\n\r\n        // Call the callback function.\r\n        callbackFuncInvoker(this.args);\r\n    };\r\n}\r\n", "import Action from \"./nodes/leaf/action\";\r\nimport Condition from \"./nodes/leaf/condition\";\r\nimport Wait from \"./nodes/leaf/wait\";\r\nimport Root from \"./nodes/decorator/root\";\r\nimport Repeat from \"./nodes/decorator/repeat\";\r\nimport Retry from \"./nodes/decorator/retry\";\r\nimport Flip from \"./nodes/decorator/flip\";\r\nimport Succeed from \"./nodes/decorator/succeed\";\r\nimport Fail from \"./nodes/decorator/fail\";\r\nimport Lotto from \"./nodes/composite/lotto\";\r\nimport Selector from \"./nodes/composite/selector\";\r\nimport Sequence from \"./nodes/composite/sequence\";\r\nimport Parallel from \"./nodes/composite/parallel\";\r\nimport Node from \"./nodes/node\";\r\nimport While from \"./attributes/guards/while\";\r\nimport Until from \"./attributes/guards/until\";\r\nimport Entry from \"./attributes/callbacks/entry\";\r\nimport Exit from \"./attributes/callbacks/exit\";\r\nimport Step from \"./attributes/callbacks/step\";\r\nimport Callback from \"./attributes/callbacks/callback\";\r\nimport Guard from \"./attributes/guards/guard\";\r\nimport Attribute from \"./attributes/attribute\";\r\nimport Composite from \"./nodes/composite/composite\";\r\nimport Decorator from \"./nodes/decorator/decorator\";\r\nimport Leaf from \"./nodes/leaf/leaf\";\r\n\r\nexport type Argument<T> = {\r\n    value: T;\r\n    type: string; // Used for validation.\r\n};\r\ntype NullArgument = Argument<null> & {\r\n    type: \"null\";\r\n};\r\ntype BooleanArgument = Argument<boolean> & {\r\n    type: \"boolean\";\r\n};\r\ntype NumberArgument = Argument<number> & {\r\n    type: \"number\";\r\n    isInteger: boolean; // Used for validation.\r\n};\r\ntype StringPlaceholderArgument = Argument<string> & {\r\n    type: \"string\";\r\n};\r\ntype IdentifierArgument = Argument<string> & {\r\n    type: \"identifier\";\r\n};\r\nexport type AnyArgument =\r\n    | NullArgument\r\n    | BooleanArgument\r\n    | NumberArgument\r\n    | StringPlaceholderArgument\r\n    | IdentifierArgument;\r\n\r\n/**\r\n * The node attribute factories.\r\n */\r\nconst AttributeFactories: {\r\n    [key: string]: (functionName: string, attributeArguments: AnyArgument[]) => Callback | Guard;\r\n} = {\r\n    WHILE: (condition: string, attributeArguments: AnyArgument[]) => new While(condition, attributeArguments),\r\n    UNTIL: (condition: string, attributeArguments: AnyArgument[]) => new Until(condition, attributeArguments),\r\n    ENTRY: (functionName: string, attributeArguments: AnyArgument[]) => new Entry(functionName, attributeArguments),\r\n    EXIT: (functionName: string, attributeArguments: AnyArgument[]) => new Exit(functionName, attributeArguments),\r\n    STEP: (functionName: string, attributeArguments: AnyArgument[]) => new Step(functionName, attributeArguments)\r\n};\r\n\r\ntype Validatable = {\r\n    children?: AstNode<Node>[];\r\n    validate: (depth: number) => void;\r\n};\r\n\r\ntype NodeInstanceCreator<T extends Node> = (\r\n    namedRootNodeProvider: (name: string) => RootAstNode,\r\n    visitedBranches: string[]\r\n) => T;\r\n\r\nexport type AstNode<T extends Node> = Validatable & {\r\n    type: string;\r\n    createNodeInstance: NodeInstanceCreator<T>;\r\n};\r\n\r\nexport type LeafAstNode<T extends Leaf = Leaf> = AstNode<T> & {\r\n    type: \"action\" | \"condition\" | \"wait\";\r\n    attributes: Attribute[];\r\n};\r\n\r\nexport type CompositeAstNode<T extends Composite = Composite> = AstNode<T> & {\r\n    type: \"lotto\" | \"parallel\" | \"selector\" | \"sequence\";\r\n    attributes: Attribute[];\r\n    children: AstNode<Node>[];\r\n};\r\n\r\nexport type DecoratorAstNode<T extends Decorator = Decorator> = AstNode<T> & {\r\n    type: \"fail\" | \"flip\" | \"repeat\" | \"retry\" | \"root\" | \"succeed\";\r\n    attributes: Attribute[];\r\n    children: AstNode<Node>[];\r\n};\r\n\r\nexport type BranchAstNode = AstNode<Node> & {\r\n    type: \"branch\";\r\n    branchName: \"\" | string;\r\n};\r\n\r\nexport type LottoAstNode = CompositeAstNode<Lotto> & {\r\n    type: \"lotto\";\r\n    tickets: number[];\r\n};\r\n\r\nexport type RootAstNode = DecoratorAstNode<Root> & {\r\n    type: \"root\";\r\n    name: null | string;\r\n};\r\n\r\nexport type IterableAstNode = DecoratorAstNode<Repeat | Retry> & {\r\n    type: \"repeat\" | \"retry\";\r\n    iterations: null | number;\r\n    maximumIterations: null | number;\r\n};\r\n\r\nexport type ActionAstNode = LeafAstNode<Action> & {\r\n    type: \"action\";\r\n    actionName: string;\r\n    actionArguments: AnyArgument[];\r\n};\r\n\r\nexport type ConditionAstNode = LeafAstNode<Condition> & {\r\n    type: \"condition\";\r\n    conditionName: string;\r\n    conditionArguments: AnyArgument[];\r\n};\r\n\r\nexport type WaitAstNode = LeafAstNode<Wait> & {\r\n    type: \"wait\";\r\n    duration: number | null;\r\n    longestDuration: number | null;\r\n};\r\n\r\nexport type AnyAstNode =\r\n    | BranchAstNode\r\n    | CompositeAstNode\r\n    | LottoAstNode\r\n    | DecoratorAstNode\r\n    | RootAstNode\r\n    | IterableAstNode\r\n    | LeafAstNode\r\n    | ActionAstNode\r\n    | ConditionAstNode\r\n    | WaitAstNode;\r\n\r\n/**\r\n * The AST node factories.\r\n */\r\nconst ASTNodeFactories = {\r\n    ROOT: (): RootAstNode => ({\r\n        type: \"root\",\r\n        attributes: [],\r\n        name: null,\r\n        children: [],\r\n        validate(depth: number) {\r\n            // A root node cannot be the child of another node.\r\n            if (depth > 1) {\r\n                throw new Error(\"a root node cannot be the child of another node\");\r\n            }\r\n\r\n            // A root node must have a single child node.\r\n            if (this.children.length !== 1) {\r\n                throw new Error(\"a root node must have a single child\");\r\n            }\r\n        },\r\n        createNodeInstance(namedRootNodeProvider, visitedBranches) {\r\n            return new Root(\r\n                this.attributes,\r\n                this.children![0].createNodeInstance(namedRootNodeProvider, visitedBranches.slice())\r\n            );\r\n        }\r\n    }),\r\n    BRANCH: (): BranchAstNode => ({\r\n        type: \"branch\",\r\n        branchName: \"\",\r\n        validate() {},\r\n        createNodeInstance(namedRootNodeProvider, visitedBranches) {\r\n            // Try to find the root node with a matching branch name.\r\n            const targetRootNode = namedRootNodeProvider(this.branchName);\r\n\r\n            // If we have already visited this branch then we have a circular dependency.\r\n            if (visitedBranches.indexOf(this.branchName) !== -1) {\r\n                throw new Error(`circular dependency found in branch node references for branch '${this.branchName}'`);\r\n            }\r\n\r\n            // If we have a target root node, then the node instance we want will be the first and only child of the referenced root node.\r\n            if (targetRootNode) {\r\n                return targetRootNode\r\n                    .createNodeInstance(namedRootNodeProvider, visitedBranches.concat(this.branchName))\r\n                    .getChildren()[0];\r\n            } else {\r\n                throw new Error(`branch references root node '${this.branchName}' which has not been defined`);\r\n            }\r\n        }\r\n    }),\r\n    SELECTOR: (): CompositeAstNode => ({\r\n        type: \"selector\",\r\n        attributes: [],\r\n        children: [],\r\n        validate() {\r\n            // A selector node must have at least a single node.\r\n            if (this.children.length < 1) {\r\n                throw new Error(\"a selector node must have at least a single child\");\r\n            }\r\n        },\r\n        createNodeInstance(namedRootNodeProvider, visitedBranches) {\r\n            return new Selector(\r\n                this.attributes,\r\n                this.children.map((child) => child.createNodeInstance(namedRootNodeProvider, visitedBranches.slice()))\r\n            );\r\n        }\r\n    }),\r\n    SEQUENCE: (): CompositeAstNode => ({\r\n        type: \"sequence\",\r\n        attributes: [],\r\n        children: [],\r\n        validate() {\r\n            // A sequence node must have at least a single node.\r\n            if (this.children.length < 1) {\r\n                throw new Error(\"a sequence node must have at least a single child\");\r\n            }\r\n        },\r\n        createNodeInstance(namedRootNodeProvider, visitedBranches) {\r\n            return new Sequence(\r\n                this.attributes,\r\n                this.children.map((child) => child.createNodeInstance(namedRootNodeProvider, visitedBranches.slice()))\r\n            );\r\n        }\r\n    }),\r\n    PARALLEL: (): CompositeAstNode => ({\r\n        type: \"parallel\",\r\n        attributes: [],\r\n        children: [],\r\n        validate() {\r\n            // A parallel node must have at least a single node.\r\n            if (this.children.length < 1) {\r\n                throw new Error(\"a parallel node must have at least a single child\");\r\n            }\r\n        },\r\n        createNodeInstance(namedRootNodeProvider, visitedBranches) {\r\n            return new Parallel(\r\n                this.attributes,\r\n                this.children.map((child) => child.createNodeInstance(namedRootNodeProvider, visitedBranches.slice()))\r\n            );\r\n        }\r\n    }),\r\n    LOTTO: (): LottoAstNode => ({\r\n        type: \"lotto\",\r\n        attributes: [],\r\n        children: [],\r\n        tickets: [],\r\n        validate() {\r\n            // A lotto node must have at least a single node.\r\n            if (this.children!.length < 1) {\r\n                throw new Error(\"a lotto node must have at least a single child\");\r\n            }\r\n        },\r\n        createNodeInstance(namedRootNodeProvider, visitedBranches) {\r\n            return new Lotto(\r\n                this.attributes,\r\n                this.tickets!,\r\n                this.children!.map((child) => child.createNodeInstance(namedRootNodeProvider, visitedBranches.slice()))\r\n            );\r\n        }\r\n    }),\r\n    REPEAT: (): IterableAstNode => ({\r\n        type: \"repeat\",\r\n        attributes: [],\r\n        iterations: null,\r\n        maximumIterations: null,\r\n        children: [],\r\n        validate() {\r\n            // A repeat node must have a single node.\r\n            if (this.children!.length !== 1) {\r\n                throw new Error(\"a repeat node must have a single child\");\r\n            }\r\n\r\n            // A repeat node must have a positive number of iterations if defined.\r\n            if (this.iterations !== null && this.iterations! < 0) {\r\n                throw new Error(\"a repeat node must have a positive number of iterations if defined\");\r\n            }\r\n\r\n            // There is validation to carry out if a longest duration was defined.\r\n            if (this.maximumIterations !== null) {\r\n                // A repeat node must have a positive maximum iterations count if defined.\r\n                if (this.maximumIterations! < 0) {\r\n                    throw new Error(\"a repeat node must have a positive maximum iterations count if defined\");\r\n                }\r\n\r\n                // A repeat node must not have an iteration count that exceeds the maximum iteration count.\r\n                if (this.iterations! > this.maximumIterations!) {\r\n                    throw new Error(\r\n                        \"a repeat node must not have an iteration count that exceeds the maximum iteration count\"\r\n                    );\r\n                }\r\n            }\r\n        },\r\n        createNodeInstance(namedRootNodeProvider, visitedBranches) {\r\n            return new Repeat(\r\n                this.attributes,\r\n                this.iterations!,\r\n                this.maximumIterations!,\r\n                this.children![0].createNodeInstance(namedRootNodeProvider, visitedBranches.slice())\r\n            );\r\n        }\r\n    }),\r\n    RETRY: (): IterableAstNode => ({\r\n        type: \"retry\",\r\n        attributes: [],\r\n        iterations: null,\r\n        maximumIterations: null,\r\n        children: [],\r\n        validate() {\r\n            // A retry node must have a single node.\r\n            if (this.children!.length !== 1) {\r\n                throw new Error(\"a retry node must have a single child\");\r\n            }\r\n\r\n            // A retry node must have a positive number of iterations if defined.\r\n            if (this.iterations !== null && this.iterations! < 0) {\r\n                throw new Error(\"a retry node must have a positive number of iterations if defined\");\r\n            }\r\n\r\n            // There is validation to carry out if a longest duration was defined.\r\n            if (this.maximumIterations !== null) {\r\n                // A retry node must have a positive maximum iterations count if defined.\r\n                if (this.maximumIterations! < 0) {\r\n                    throw new Error(\"a retry node must have a positive maximum iterations count if defined\");\r\n                }\r\n\r\n                // A retry node must not have an iteration count that exceeds the maximum iteration count.\r\n                if (this.iterations! > this.maximumIterations!) {\r\n                    throw new Error(\r\n                        \"a retry node must not have an iteration count that exceeds the maximum iteration count\"\r\n                    );\r\n                }\r\n            }\r\n        },\r\n        createNodeInstance(namedRootNodeProvider, visitedBranches) {\r\n            return new Retry(\r\n                this.attributes,\r\n                this.iterations!,\r\n                this.maximumIterations!,\r\n                this.children![0].createNodeInstance(namedRootNodeProvider, visitedBranches.slice())\r\n            );\r\n        }\r\n    }),\r\n    FLIP: (): DecoratorAstNode => ({\r\n        type: \"flip\",\r\n        attributes: [],\r\n        children: [],\r\n        validate() {\r\n            // A flip node must have a single node.\r\n            if (this.children!.length !== 1) {\r\n                throw new Error(\"a flip node must have a single child\");\r\n            }\r\n        },\r\n        createNodeInstance(namedRootNodeProvider, visitedBranches) {\r\n            return new Flip(\r\n                this.attributes,\r\n                this.children![0].createNodeInstance(namedRootNodeProvider, visitedBranches.slice())\r\n            );\r\n        }\r\n    }),\r\n    SUCCEED: (): DecoratorAstNode => ({\r\n        type: \"succeed\",\r\n        attributes: [],\r\n        children: [],\r\n        validate() {\r\n            // A succeed node must have a single node.\r\n            if (this.children!.length !== 1) {\r\n                throw new Error(\"a succeed node must have a single child\");\r\n            }\r\n        },\r\n        createNodeInstance(namedRootNodeProvider, visitedBranches) {\r\n            return new Succeed(\r\n                this.attributes,\r\n                this.children![0].createNodeInstance(namedRootNodeProvider, visitedBranches.slice())\r\n            );\r\n        }\r\n    }),\r\n    FAIL: (): DecoratorAstNode => ({\r\n        type: \"fail\",\r\n        attributes: [],\r\n        children: [],\r\n        validate() {\r\n            // A fail node must have a single node.\r\n            if (this.children!.length !== 1) {\r\n                throw new Error(\"a fail node must have a single child\");\r\n            }\r\n        },\r\n        createNodeInstance(namedRootNodeProvider, visitedBranches) {\r\n            return new Fail(\r\n                this.attributes,\r\n                this.children![0].createNodeInstance(namedRootNodeProvider, visitedBranches.slice())\r\n            );\r\n        }\r\n    }),\r\n    WAIT: (): WaitAstNode => ({\r\n        type: \"wait\",\r\n        attributes: [],\r\n        duration: null,\r\n        longestDuration: null,\r\n        validate() {\r\n            // A wait node must have a positive duration.\r\n            if (this.duration! < 0) {\r\n                throw new Error(\"a wait node must have a positive duration\");\r\n            }\r\n\r\n            // There is validation to carry out if a longest duration was defined.\r\n            if (this.longestDuration) {\r\n                // A wait node must have a positive longest duration.\r\n                if (this.longestDuration < 0) {\r\n                    throw new Error(\"a wait node must have a positive longest duration if one is defined\");\r\n                }\r\n\r\n                // A wait node must not have a duration that exceeds the longest duration.\r\n                if (this.duration! > this.longestDuration) {\r\n                    throw new Error(\"a wait node must not have a shortest duration that exceeds the longest duration\");\r\n                }\r\n            }\r\n        },\r\n        createNodeInstance() {\r\n            return new Wait(this.attributes, this.duration!, this.longestDuration!);\r\n        }\r\n    }),\r\n    ACTION: (): ActionAstNode => ({\r\n        type: \"action\",\r\n        attributes: [],\r\n        actionName: \"\",\r\n        actionArguments: [],\r\n        validate() {},\r\n        createNodeInstance() {\r\n            return new Action(this.attributes, this.actionName!, this.actionArguments!);\r\n        }\r\n    }),\r\n    CONDITION: (): ConditionAstNode => ({\r\n        type: \"condition\",\r\n        attributes: [],\r\n        conditionName: \"\",\r\n        conditionArguments: [],\r\n        validate() {},\r\n        createNodeInstance() {\r\n            return new Condition(this.attributes, this.conditionName!, this.conditionArguments!);\r\n        }\r\n    })\r\n};\r\n\r\ntype OtherAstNodes = AstNode<Node>[];\r\n\r\n/**\r\n * Create an array of root AST nodes based on the given definition.\r\n * @param definition The definition to parse the AST nodes from.\r\n * @returns The base definition AST nodes.\r\n */\r\nexport default function buildRootASTNodes(definition: string): RootAstNode[] {\r\n    // Swap out any node/attribute argument string literals with a placeholder and get a mapping of placeholders to original values as well as the processed definition.\r\n    const { placeholders, processedDefinition } = substituteStringLiterals(definition);\r\n\r\n    // Convert the processed definition (with substituted string literals) into an array of raw tokens.\r\n    const tokens = parseTokensFromDefinition(processedDefinition);\r\n\r\n    // There must be at least 3 tokens for the tree definition to be valid. 'ROOT', '{' and '}'.\r\n    if (tokens.length < 3) {\r\n        throw new Error(\"invalid token count\");\r\n    }\r\n\r\n    // We should have a matching number of '{' and '}' tokens. If not, then there are scopes that have not been properly closed.\r\n    if (tokens.filter((token) => token === \"{\").length !== tokens.filter((token) => token === \"}\").length) {\r\n        throw new Error(\"scope character mismatch\");\r\n    }\r\n\r\n    // Create a stack of node children arrays, starting with a definition scope.\r\n    const stack: [RootAstNode[], ...OtherAstNodes[]] = [[]];\r\n    const rootScope = stack[0];\r\n\r\n    // We should keep processing the raw tokens until we run out of them.\r\n    while (tokens.length) {\r\n        // Grab the next token.\r\n        const token = tokens.shift();\r\n\r\n        const currentScope = stack[stack.length - 1] as OtherAstNodes;\r\n\r\n        // How we create the next AST token depends on the current raw token value.\r\n        switch (token!.toUpperCase()) {\r\n            case \"ROOT\": {\r\n                // Create a ROOT AST node.\r\n                const node = ASTNodeFactories.ROOT();\r\n\r\n                // Push the ROOT node into the current scope.\r\n                rootScope.push(node);\r\n\r\n                // We may have a root node name defined as an argument.\r\n                if (tokens[0] === \"[\") {\r\n                    const rootArguments = getArguments(tokens, placeholders);\r\n\r\n                    // We should have only a single argument that is not an empty string for a root node, which is the root name identifier.\r\n                    if (rootArguments.length === 1 && rootArguments[0].type === \"identifier\") {\r\n                        // The root name will be the first and only node argument.\r\n                        node.name = rootArguments[0].value as string;\r\n                    } else {\r\n                        throw new Error(\"expected single root name argument\");\r\n                    }\r\n                }\r\n\r\n                // Try to pick any attributes off of the token stack.\r\n                node.attributes = getAttributes(tokens, placeholders);\r\n\r\n                popAndCheck(tokens, \"{\");\r\n\r\n                // The new scope is that of the new ROOT nodes children.\r\n                stack.push(node.children!);\r\n                break;\r\n            }\r\n\r\n            case \"BRANCH\": {\r\n                // Create a BRANCH AST node.\r\n                const node = ASTNodeFactories.BRANCH();\r\n\r\n                // Push the BRANCH node into the current scope.\r\n                currentScope.push(node);\r\n\r\n                // We must have arguments defined, as we require a branch name argument.\r\n                if (tokens[0] !== \"[\") {\r\n                    throw new Error(\"expected single branch name argument\");\r\n                }\r\n\r\n                // The branch name will be defined as a node argument.\r\n                const branchArguments = getArguments(tokens, placeholders);\r\n\r\n                // We should have only a single identifer argument for a branch node, which is the branch name.\r\n                if (branchArguments.length === 1 && branchArguments[0].type === \"identifier\") {\r\n                    // The branch name will be the first and only node argument.\r\n                    node.branchName = branchArguments[0].value as string;\r\n                } else {\r\n                    throw new Error(\"expected single branch name argument\");\r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"SELECTOR\": {\r\n                // Create a SELECTOR AST node.\r\n                const node = ASTNodeFactories.SELECTOR();\r\n\r\n                // Push the SELECTOR node into the current scope.\r\n                currentScope.push(node);\r\n\r\n                // Try to pick any attributes off of the token stack.\r\n                node.attributes = getAttributes(tokens, placeholders);\r\n\r\n                popAndCheck(tokens, \"{\");\r\n\r\n                // The new scope is that of the new SELECTOR nodes children.\r\n                stack.push(node.children!);\r\n                break;\r\n            }\r\n\r\n            case \"SEQUENCE\": {\r\n                // Create a SEQUENCE AST node.\r\n                const node = ASTNodeFactories.SEQUENCE();\r\n\r\n                // Push the SEQUENCE node into the current scope.\r\n                currentScope.push(node);\r\n\r\n                // Try to pick any attributes off of the token stack.\r\n                node.attributes = getAttributes(tokens, placeholders);\r\n\r\n                popAndCheck(tokens, \"{\");\r\n\r\n                // The new scope is that of the new SEQUENCE nodes children.\r\n                stack.push(node.children!);\r\n                break;\r\n            }\r\n\r\n            case \"PARALLEL\": {\r\n                // Create a PARALLEL AST node.\r\n                const node = ASTNodeFactories.PARALLEL();\r\n\r\n                // Push the PARALLEL node into the current scope.\r\n                currentScope.push(node);\r\n\r\n                // Try to pick any attributes off of the token stack.\r\n                node.attributes = getAttributes(tokens, placeholders);\r\n\r\n                popAndCheck(tokens, \"{\");\r\n\r\n                // The new scope is that of the new PARALLEL nodes children.\r\n                stack.push(node.children!);\r\n                break;\r\n            }\r\n\r\n            case \"LOTTO\": {\r\n                // Create a LOTTO AST node.\r\n                const node = ASTNodeFactories.LOTTO();\r\n\r\n                // Push the LOTTO node into the current scope.\r\n                currentScope.push(node);\r\n\r\n                // If the next token is a '[' character then some ticket counts have been defined as arguments.\r\n                if (tokens[0] === \"[\") {\r\n                    // Get the ticket count arguments, each argument must be a number.\r\n                    node.tickets = getArguments(\r\n                        tokens,\r\n                        placeholders,\r\n                        (arg) => arg.type === \"number\" && !!arg.isInteger,\r\n                        \"lotto node ticket counts must be integer values\"\r\n                    ).map((argument) => argument.value as number);\r\n                }\r\n\r\n                // Try to pick any attributes off of the token stack.\r\n                node.attributes = getAttributes(tokens, placeholders);\r\n\r\n                popAndCheck(tokens, \"{\");\r\n\r\n                // The new scope is that of the new LOTTO nodes children.\r\n                stack.push(node.children!);\r\n                break;\r\n            }\r\n\r\n            case \"CONDITION\": {\r\n                // Create a CONDITION AST node.\r\n                const node = ASTNodeFactories.CONDITION();\r\n\r\n                // Push the CONDITION node into the current scope.\r\n                currentScope.push(node);\r\n\r\n                // We must have arguments defined, as we require a condition function name argument.\r\n                if (tokens[0] !== \"[\") {\r\n                    throw new Error(\"expected condition name identifier argument\");\r\n                }\r\n\r\n                // Grab the condition node arguments.\r\n                const conditionArguments = getArguments(tokens, placeholders);\r\n\r\n                // We should have at least a single identifier argument for a condition node, which is the condition function name.\r\n                if (conditionArguments.length && conditionArguments[0].type === \"identifier\") {\r\n                    // The condition function name will be the first node argument.\r\n                    node.conditionName = conditionArguments.shift()!.value as string;\r\n                } else {\r\n                    throw new Error(\"expected condition name identifier argument\");\r\n                }\r\n\r\n                // Only the first argument should have been an identifier, all following arguments must be string, number, boolean or null.\r\n                conditionArguments\r\n                    .filter((arg) => arg.type === \"identifier\")\r\n                    .forEach((arg) => {\r\n                        throw new Error(\r\n                            \"invalid condition node argument value '\" +\r\n                                arg.value +\r\n                                \"', must be string, number, boolean or null\"\r\n                        );\r\n                    });\r\n\r\n                // Any node arguments that follow the condition name identifier will be treated as condition function arguments.\r\n                node.conditionArguments = conditionArguments;\r\n\r\n                // Try to pick any attributes off of the token stack.\r\n                node.attributes = getAttributes(tokens, placeholders);\r\n                break;\r\n            }\r\n\r\n            case \"FLIP\": {\r\n                // Create a FLIP AST node.\r\n                const node = ASTNodeFactories.FLIP();\r\n\r\n                // Push the Flip node into the current scope.\r\n                currentScope.push(node);\r\n\r\n                // Try to pick any attributes off of the token stack.\r\n                node.attributes = getAttributes(tokens, placeholders);\r\n\r\n                popAndCheck(tokens, \"{\");\r\n\r\n                // The new scope is that of the new FLIP nodes children.\r\n                stack.push(node.children!);\r\n                break;\r\n            }\r\n\r\n            case \"SUCCEED\": {\r\n                // Create a SUCCEED AST node.\r\n                const node = ASTNodeFactories.SUCCEED();\r\n\r\n                // Push the Succeed node into the current scope.\r\n                currentScope.push(node);\r\n\r\n                // Try to pick any attributes off of the token stack.\r\n                node.attributes = getAttributes(tokens, placeholders);\r\n\r\n                popAndCheck(tokens, \"{\");\r\n\r\n                // The new scope is that of the new Succeed nodes children.\r\n                stack.push(node.children!);\r\n                break;\r\n            }\r\n\r\n            case \"FAIL\": {\r\n                // Create a FAIL AST node.\r\n                const node = ASTNodeFactories.FAIL();\r\n\r\n                // Push the Fail node into the current scope.\r\n                currentScope.push(node);\r\n\r\n                // Try to pick any attributes off of the token stack.\r\n                node.attributes = getAttributes(tokens, placeholders);\r\n\r\n                popAndCheck(tokens, \"{\");\r\n\r\n                // The new scope is that of the new Fail nodes children.\r\n                stack.push(node.children!);\r\n                break;\r\n            }\r\n\r\n            case \"WAIT\": {\r\n                // Create a WAIT AST node.\r\n                const node = ASTNodeFactories.WAIT();\r\n\r\n                // Push the WAIT node into the current scope.\r\n                currentScope.push(node);\r\n\r\n                // Get the duration and potential longest duration of the wait.\r\n                const durations = getArguments(\r\n                    tokens,\r\n                    placeholders,\r\n                    (arg) => arg.type === \"number\" && !!arg.isInteger,\r\n                    \"wait node durations must be integer values\"\r\n                ).map((argument) => argument.value);\r\n\r\n                // We should have got one or two durations.\r\n                if (durations.length === 1) {\r\n                    // A static duration was defined.\r\n                    node.duration = durations[0] as number;\r\n                } else if (durations.length === 2) {\r\n                    // A shortest and longest duration was defined.\r\n                    node.duration = durations[0] as number;\r\n                    node.longestDuration = durations[1] as number;\r\n                } else {\r\n                    // An incorrect number of durations was defined.\r\n                    throw new Error(\"invalid number of wait node duration arguments defined\");\r\n                }\r\n\r\n                // Try to pick any attributes off of the token stack.\r\n                node.attributes = getAttributes(tokens, placeholders);\r\n                break;\r\n            }\r\n\r\n            case \"REPEAT\": {\r\n                // Create a REPEAT AST node.\r\n                const node = ASTNodeFactories.REPEAT();\r\n\r\n                // Push the REPEAT node into the current scope.\r\n                currentScope.push(node);\r\n\r\n                // Check for iteration counts ([])\r\n                if (tokens[0] === \"[\") {\r\n                    // An iteration count has been defined. Get the iteration and potential maximum iteration of the wait.\r\n                    const iterationArguments = getArguments(\r\n                        tokens,\r\n                        placeholders,\r\n                        (arg) => arg.type === \"number\" && !!arg.isInteger,\r\n                        \"repeat node iteration counts must be integer values\"\r\n                    ).map((argument) => argument.value);\r\n\r\n                    // We should have got one or two iteration counts.\r\n                    if (iterationArguments.length === 1) {\r\n                        // A static iteration count was defined.\r\n                        node.iterations = iterationArguments[0] as number;\r\n                    } else if (iterationArguments.length === 2) {\r\n                        // A minimum and maximum iteration count was defined.\r\n                        node.iterations = iterationArguments[0] as number;\r\n                        node.maximumIterations = iterationArguments[1] as number;\r\n                    } else {\r\n                        // An incorrect number of iteration counts was defined.\r\n                        throw new Error(\"invalid number of repeat node iteration count arguments defined\");\r\n                    }\r\n                }\r\n\r\n                // Try to pick any attributes off of the token stack.\r\n                node.attributes = getAttributes(tokens, placeholders);\r\n\r\n                popAndCheck(tokens, \"{\");\r\n\r\n                // The new scope is that of the new REPEAT nodes children.\r\n                stack.push(node.children!);\r\n                break;\r\n            }\r\n\r\n            case \"RETRY\": {\r\n                // Create a RETRY AST node.\r\n                const node = ASTNodeFactories.RETRY();\r\n\r\n                // Push the RETRY node into the current scope.\r\n                currentScope.push(node);\r\n\r\n                // Check for iteration counts ([])\r\n                if (tokens[0] === \"[\") {\r\n                    // An iteration count has been defined. Get the iteration and potential maximum iteration of the wait.\r\n                    const iterationArguments = getArguments(\r\n                        tokens,\r\n                        placeholders,\r\n                        (arg) => arg.type === \"number\" && !!arg.isInteger,\r\n                        \"retry node iteration counts must be integer values\"\r\n                    ).map((argument) => argument.value);\r\n\r\n                    // We should have got one or two iteration counts.\r\n                    if (iterationArguments.length === 1) {\r\n                        // A static iteration count was defined.\r\n                        node.iterations = iterationArguments[0] as number;\r\n                    } else if (iterationArguments.length === 2) {\r\n                        // A minimum and maximum iteration count was defined.\r\n                        node.iterations = iterationArguments[0] as number;\r\n                        node.maximumIterations = iterationArguments[1] as number;\r\n                    } else {\r\n                        // An incorrect number of iteration counts was defined.\r\n                        throw new Error(\"invalid number of retry node iteration count arguments defined\");\r\n                    }\r\n                }\r\n\r\n                // Try to pick any attributes off of the token stack.\r\n                node.attributes = getAttributes(tokens, placeholders);\r\n\r\n                popAndCheck(tokens, \"{\");\r\n\r\n                // The new scope is that of the new RETRY nodes children.\r\n                stack.push(node.children!);\r\n                break;\r\n            }\r\n\r\n            case \"ACTION\": {\r\n                // Create a ACTION AST node.\r\n                const node = ASTNodeFactories.ACTION();\r\n\r\n                // Push the ACTION node into the current scope.\r\n                currentScope.push(node);\r\n\r\n                // We must have arguments defined, as we require an action name argument.\r\n                if (tokens[0] !== \"[\") {\r\n                    throw new Error(\"expected action name identifier argument\");\r\n                }\r\n\r\n                // The action name will be defined as a node argument.\r\n                const actionArguments = getArguments(tokens, placeholders);\r\n\r\n                // We should have at least one identifer argument for an action node, which is the action name.\r\n                if (actionArguments.length && actionArguments[0].type === \"identifier\") {\r\n                    // The action name will be the first and only node argument.\r\n                    node.actionName = actionArguments.shift()!.value as string;\r\n                } else {\r\n                    throw new Error(\"expected action name identifier argument\");\r\n                }\r\n\r\n                // Only the first argument should have been an identifier, all following arguments must be string, number, boolean or null.\r\n                actionArguments\r\n                    .filter((arg) => arg.type === \"identifier\")\r\n                    .forEach((arg) => {\r\n                        throw new Error(\r\n                            \"invalid action node argument value '\" +\r\n                                arg.value +\r\n                                \"', must be string, number, boolean or null\"\r\n                        );\r\n                    });\r\n\r\n                // Any node arguments that follow the action name identifier will be treated as action function arguments.\r\n                node.actionArguments = actionArguments;\r\n\r\n                // Try to pick any attributes off of the token stack.\r\n                node.attributes = getAttributes(tokens, placeholders);\r\n                break;\r\n            }\r\n\r\n            case \"}\": {\r\n                // The '}' character closes the current scope.\r\n                stack.pop();\r\n                break;\r\n            }\r\n\r\n            default: {\r\n                throw new Error(\"unexpected token: \" + token);\r\n            }\r\n        }\r\n    }\r\n\r\n    // A function to recursively validate each of the nodes in the AST.\r\n    const validateASTNode = (node: Validatable, depth: number): void => {\r\n        // Validate the node.\r\n        node.validate(depth);\r\n\r\n        // Validate each child of the node.\r\n        (node.children || []).forEach((child) => validateASTNode(child, depth + 1));\r\n    };\r\n\r\n    // Start node validation from the definition root.\r\n    validateASTNode(\r\n        {\r\n            children: stack[0] as RootAstNode[],\r\n            validate(this: { children: RootAstNode[] }) {\r\n                // We must have at least one node defined as the definition scope, which should be a root node.\r\n                if (this.children.length === 0) {\r\n                    throw new Error(\"expected root node to have been defined\");\r\n                }\r\n\r\n                // Each node at the base of the definition scope MUST be a root node.\r\n                for (const definitionLevelNode of this.children) {\r\n                    if (definitionLevelNode.type !== \"root\") {\r\n                        throw new Error(\"expected root node at base of definition\");\r\n                    }\r\n                }\r\n\r\n                // Exactly one root node must not have a name defined. This will be the main root, others will have to be referenced via branch nodes.\r\n                if (this.children.filter((definitionLevelNode) => definitionLevelNode.name === null).length !== 1) {\r\n                    throw new Error(\"expected single unnamed root node at base of definition to act as main root\");\r\n                }\r\n\r\n                // No two named root nodes can have matching names.\r\n                const rootNodeNames: string[] = [];\r\n                for (const definitionLevelNode of this.children) {\r\n                    if (rootNodeNames.indexOf(definitionLevelNode.name!) !== -1) {\r\n                        throw new Error(`multiple root nodes found with duplicate name '${definitionLevelNode.name}'`);\r\n                    } else {\r\n                        rootNodeNames.push(definitionLevelNode.name!);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        0\r\n    );\r\n\r\n    // Return the root AST nodes.\r\n    return stack[0];\r\n}\r\n\r\n/**\r\n * Pop the next raw token off of the stack and throw an error if it wasn't the expected one.\r\n * @param tokens The array of remaining tokens.\r\n * @param expected An optional string or array or items, one of which must match the next popped token.\r\n * @returns The popped token.\r\n */\r\nfunction popAndCheck(tokens: string[], expected: string | string[]) {\r\n    // Get and remove the next token.\r\n    const popped = tokens.shift();\r\n\r\n    // We were expecting another token.\r\n    if (popped === undefined) {\r\n        throw new Error(\"unexpected end of definition\");\r\n    }\r\n\r\n    // Do we have an expected token/tokens array?\r\n    if (expected !== undefined) {\r\n        // Check whether the popped token matches at least one of our expected items.\r\n        var tokenMatchesExpectation = ([] as string[])\r\n            .concat(expected)\r\n            .some((item) => popped.toUpperCase() === item.toUpperCase());\r\n\r\n        // Throw an error if the popped token didn't match any of our expected items.\r\n        if (!tokenMatchesExpectation) {\r\n            const expectationString = ([] as string[])\r\n                .concat(expected)\r\n                .map((item) => \"'\" + item + \"'\")\r\n                .join(\" or \");\r\n            throw new Error(\"unexpected token found. Expected \" + expectationString + \" but got '\" + popped + \"'\");\r\n        }\r\n    }\r\n\r\n    // Return the popped token.\r\n    return popped;\r\n}\r\n\r\ntype Placeholders = { [key: string]: string };\r\n\r\n/**\r\n * Pull an argument definition list off of the token stack.\r\n * @param tokens The array of remaining tokens.\r\n * @param stringArgumentPlaceholders The mapping of string literal node argument placeholders to original values.\r\n * @param argumentValidator The argument validator function.\r\n * @param validationFailedMessage  The exception message to throw if argument validation fails.\r\n * @returns The argument definition list.\r\n */\r\nfunction getArguments(\r\n    tokens: string[],\r\n    stringArgumentPlaceholders: Placeholders,\r\n    argumentValidator?: (arg: AnyArgument) => boolean,\r\n    validationFailedMessage?: string\r\n) {\r\n    // Any lists of arguments will always be wrapped in '[]' for node arguments or '()' for attribute arguments.\r\n    // We are looking for a '[' or '(' opener that wraps the argument tokens and the relevant closer.\r\n    const closer = popAndCheck(tokens, [\"[\", \"(\"]) === \"[\" ? \"]\" : \")\";\r\n\r\n    const argumentListTokens: string[] = [];\r\n    const argumentList: AnyArgument[] = [];\r\n\r\n    // Grab all tokens between the '[' and ']' or '(' and ')'.\r\n    while (tokens.length && tokens[0] !== closer) {\r\n        // The next token is part of our arguments list.\r\n        argumentListTokens.push(tokens.shift()!);\r\n    }\r\n\r\n    // Validate the order of the argument tokens. Each token must either be a ',' or a single argument that satisfies the validator.\r\n    argumentListTokens.forEach((token, index) => {\r\n        // Get whether this token should be an actual argument.\r\n        const shouldBeArgumentToken = !(index & 1);\r\n\r\n        // If the current token should be an actual argument then validate it,otherwise it should be a ',' token.\r\n        if (shouldBeArgumentToken) {\r\n            // Get the argument definition.\r\n            const argumentDefinition = getArgumentDefinition(token!, stringArgumentPlaceholders);\r\n\r\n            // Try to validate the argument.\r\n            if (argumentValidator && !argumentValidator(argumentDefinition)) {\r\n                throw new Error(validationFailedMessage);\r\n            }\r\n\r\n            // This is a valid argument!\r\n            argumentList.push(argumentDefinition);\r\n        } else {\r\n            // The current token should be a ',' token.\r\n            if (token !== \",\") {\r\n                throw new Error(`invalid argument list, expected ',' or ']' but got '${token}'`);\r\n            }\r\n        }\r\n    });\r\n\r\n    // The arguments list should terminate with a ']' or ')' token, depending on the opener.\r\n    popAndCheck(tokens, closer);\r\n\r\n    // Return the argument list.\r\n    return argumentList;\r\n}\r\n\r\n/**\r\n * Gets an argument value definition.\r\n * @param token The argument token.\r\n * @param stringArgumentPlaceholders The mapping of string literal node argument placeholders to original values.\r\n * @returns An argument value definition.\r\n */\r\nfunction getArgumentDefinition(token: string, stringArgumentPlaceholders: Placeholders): AnyArgument {\r\n    // Check whether the token represents a null value.\r\n    if (token === \"null\") {\r\n        return {\r\n            value: null,\r\n            type: \"null\"\r\n        } as NullArgument;\r\n    }\r\n\r\n    // Check whether the token represents a boolean value.\r\n    if (token === \"true\" || token === \"false\") {\r\n        return {\r\n            value: token === \"true\",\r\n            type: \"boolean\"\r\n        } as BooleanArgument;\r\n    }\r\n\r\n    // Check whether the token represents a number value.\r\n    // TODO: Relies on broken isNaN - see MDN.\r\n    // if (!Number.isNaN(token)) {\r\n    if (!isNaN(token as any)) {\r\n        return {\r\n            value: parseFloat(token),\r\n            isInteger: parseFloat(token) === parseInt(token, 10),\r\n            type: \"number\"\r\n        } as NumberArgument;\r\n    }\r\n\r\n    // Check whether the token is a placeholder (e.g. @@0@@) representing a string literal.\r\n    if (token.match(/^@@\\d+@@$/g)) {\r\n        return {\r\n            value: stringArgumentPlaceholders[token].replace('\\\\\"', '\"'),\r\n            type: \"string\"\r\n        } as StringPlaceholderArgument;\r\n    }\r\n\r\n    // The only remaining option is that the argument value is an identifier.\r\n    return {\r\n        value: token,\r\n        type: \"identifier\"\r\n    } as IdentifierArgument;\r\n}\r\n\r\n/**\r\n * Pull any attributes off of the token stack.\r\n * @param tokens The array of remaining tokens.\r\n * @param stringArgumentPlaceholders The mapping of string literal node argument placeholders to original values.\r\n * @returns An array of attributes defined by any directly following tokens.\r\n */\r\nfunction getAttributes(tokens: string[], stringArgumentPlaceholders: Placeholders) {\r\n    // Create an array to hold any attributes found.\r\n    const attributes: Attribute[] = [];\r\n\r\n    // Keep track of names of attribute that we have found on the token stack, as we cannot have duplicates.\r\n    const attributesFound: string[] = [];\r\n\r\n    // Try to get the attribute factory for the next token.\r\n    let attributeFactory = AttributeFactories[(tokens[0] || \"\").toUpperCase()];\r\n\r\n    // Pull attribute tokens off of the tokens stack until we have no more.\r\n    while (attributeFactory) {\r\n        // Check to make sure that we have not already created a attribute of this type for this node.\r\n        if (attributesFound.indexOf(tokens[0].toUpperCase()) !== -1) {\r\n            throw new Error(`duplicate attribute '${tokens[0].toUpperCase()}' found for node`);\r\n        }\r\n\r\n        // Add the current attribute type to our array of found attributes.\r\n        attributesFound.push(tokens.shift()!.toUpperCase());\r\n\r\n        // Grab any attribute arguments.\r\n        const attributeArguments = getArguments(tokens, stringArgumentPlaceholders);\r\n\r\n        // The first attribute argument has to be an identifer, this will reference an agent function.\r\n        if (attributeArguments.length === 0 || attributeArguments[0].type !== \"identifier\") {\r\n            throw new Error(\"expected agent function name identifier argument for attribute\");\r\n        }\r\n\r\n        // Grab the first attribute which is an identifier that will reference an agent function.\r\n        const attributeFunctionName = attributeArguments.shift()! as IdentifierArgument;\r\n\r\n        // Any remaining attribute arguments must have a type of string, number, boolean or null.\r\n        attributeArguments\r\n            .filter((arg) => arg.type === \"identifier\")\r\n            .forEach((arg) => {\r\n                throw new Error(\r\n                    \"invalid attribute argument value '\" + arg.value + \"', must be string, number, boolean or null\"\r\n                );\r\n            });\r\n\r\n        // Create the attribute and add it to the array of attributes found.\r\n        // TODO: Is this a bug? Passing an IdentifierArgument as a string.\r\n        attributes.push(attributeFactory(attributeFunctionName as any as string, attributeArguments));\r\n\r\n        // Try to get the next attribute name token, as there could be multiple.\r\n        attributeFactory = AttributeFactories[(tokens[0] || \"\").toUpperCase()];\r\n    }\r\n\r\n    return attributes;\r\n}\r\n\r\n/**\r\n * Swaps out any node/attribute argument string literals with placeholders.\r\n * @param definition The definition.\r\n * @returns An object containing a mapping of placeholders to original string values as well as the processed definition string.\r\n */\r\nfunction substituteStringLiterals(definition: string): {\r\n    placeholders: { [key: string]: string };\r\n    processedDefinition: string;\r\n} {\r\n    // Create an object to hold the mapping of placeholders to original string values.\r\n    const placeholders: Placeholders = {};\r\n\r\n    // Replace any string literals wrapped with double quotes in our definition with placeholders to be processed later.\r\n    const processedDefinition = definition.replace(/\\\"(\\\\.|[^\"\\\\])*\\\"/g, (match) => {\r\n        var strippedMatch = match.substring(1, match.length - 1);\r\n        var placeholder = Object.keys(placeholders).find((key) => placeholders[key] === strippedMatch);\r\n\r\n        // If we have no existing string literal match then create a new placeholder.\r\n        if (!placeholder) {\r\n            placeholder = `@@${Object.keys(placeholders).length}@@`;\r\n            placeholders[placeholder] = strippedMatch;\r\n        }\r\n\r\n        return placeholder;\r\n    });\r\n\r\n    return { placeholders, processedDefinition };\r\n}\r\n\r\n/**\r\n * Parse the tree definition into an array of raw tokens.\r\n * @param definition The definition.\r\n * @returns An array of tokens parsed from the definition.\r\n */\r\nfunction parseTokensFromDefinition(definition: string): string[] {\r\n    // Add some space around various important characters so that they can be plucked out easier as individual tokens.\r\n    definition = definition.replace(/\\(/g, \" ( \");\r\n    definition = definition.replace(/\\)/g, \" ) \");\r\n    definition = definition.replace(/\\{/g, \" { \");\r\n    definition = definition.replace(/\\}/g, \" } \");\r\n    definition = definition.replace(/\\]/g, \" ] \");\r\n    definition = definition.replace(/\\[/g, \" [ \");\r\n    definition = definition.replace(/\\,/g, \" , \");\r\n\r\n    // Split the definition into raw token form and return it.\r\n    return definition.replace(/\\s+/g, \" \").trim().split(\" \");\r\n}\r\n", "import GuardPath, { GuardPathPart } from \"./attributes/guards/guardPath\";\r\nimport buildRootASTNodes, { AnyArgument, RootAstNode } from \"./rootAstNodesBuilder\";\r\nimport State, { AnyState } from \"./state\";\r\nimport Lookup from \"./lookup\";\r\nimport Node from \"./nodes/node\";\r\nimport Root from \"./nodes/decorator/root\";\r\nimport Composite from \"./nodes/composite/composite\";\r\nimport Decorator from \"./nodes/decorator/decorator\";\r\nimport { Agent, GlobalFunction } from \"./agent\";\r\nimport Attribute, { AttributeDetails } from \"./attributes/attribute\";\r\nimport { BehaviourTreeOptions } from \"./behaviourTreeOptions\";\r\n\r\n// Purely for outside inspection of the tree.\r\ntype FlattenedTreeNode = {\r\n    id: string;\r\n    type: string;\r\n    caption: string;\r\n    state: AnyState;\r\n    attributes: AttributeDetails[] | null;\r\n    arguments: AnyArgument[];\r\n    parentId: string | null;\r\n};\r\n\r\n/**\r\n * A representation of a behaviour tree.\r\n */\r\nexport default class BehaviourTree {\r\n    /**\r\n     * The main root tree node.\r\n     */\r\n    public readonly rootNode: Root;\r\n\r\n    /**\r\n     * Creates a new instance of the BehaviourTree class.\r\n     * @param definition The behaviour tree definition.\r\n     * @param agent The agent instance that this behaviour tree is modelling behaviour for.\r\n     * @param options The behaviour tree options object.\r\n     */\r\n    constructor(definition: string, private agent: Agent, private options: BehaviourTreeOptions = {}) {\r\n        // The tree definition must be defined and a valid string.\r\n        if (typeof definition !== \"string\") {\r\n            throw new Error(\"the tree definition must be a string\");\r\n        }\r\n\r\n        // The agent must be defined and not null.\r\n        if (typeof agent !== \"object\" || agent === null) {\r\n            throw new Error(\"the agent must be defined and not null\");\r\n        }\r\n\r\n        // Parse the behaviour tree definition, create the populated tree of behaviour tree nodes, and get the root.\r\n        this.rootNode = BehaviourTree.createRootNode(definition);\r\n    }\r\n\r\n    /**\r\n     * Gets whether the tree is in the RUNNING state.\r\n     * @returns true if the tree is in the RUNNING state, otherwise false.\r\n     */\r\n    isRunning() {\r\n        return this.rootNode.getState() === State.RUNNING;\r\n    }\r\n\r\n    /**\r\n     * Gets the current tree state of SUCCEEDED, FAILED, READY or RUNNING.\r\n     * @returns The current tree state.\r\n     */\r\n    getState() {\r\n        return this.rootNode.getState();\r\n    }\r\n\r\n    /**\r\n     * Step the tree.\r\n     * Carries out a node update that traverses the tree from the root node outwards to any child nodes, skipping those that are already in a resolved state of SUCCEEDED or FAILED.\r\n     * After being updated, leaf nodes will have a state of SUCCEEDED, FAILED or RUNNING. Leaf nodes that are left in the RUNNING state as part of a tree step will be revisited each\r\n     * subsequent step until they move into a resolved state of either SUCCEEDED or FAILED, after which execution will move through the tree to the next node with a state of READY.\r\n     *\r\n     * Calling this method when the tree is already in a resolved state of SUCCEEDED or FAILED will cause it to be reset before tree traversal begins.\r\n     */\r\n    step() {\r\n        // If the root node has already been stepped to completion then we need to reset it.\r\n        if (this.rootNode.getState() === State.SUCCEEDED || this.rootNode.getState() === State.FAILED) {\r\n            this.rootNode.reset();\r\n        }\r\n\r\n        try {\r\n            this.rootNode.update(this.agent, this.options);\r\n        } catch (exception) {\r\n            throw new Error(`error stepping tree: ${(exception as Error).message}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the tree from the root node outwards to each nested node, giving each a state of READY.\r\n     */\r\n    reset() {\r\n        this.rootNode.reset();\r\n    }\r\n\r\n    /**\r\n     * Gets the flattened details of every node in the tree.\r\n     * @returns The flattened details of every node in the tree.\r\n     */\r\n    getFlattenedNodeDetails(): FlattenedTreeNode[] {\r\n        // Create an empty flattened array of tree nodes.\r\n        const flattenedTreeNodes: FlattenedTreeNode[] = [];\r\n\r\n        /**\r\n         * Helper function to process a node instance and push details into the flattened tree nodes array.\r\n         * @param node The current node.\r\n         * @param parentUid The UID of the node parent, or null if the node is the main root node.\r\n         */\r\n        const processNode = (node: Node, parentUid: string | null) => {\r\n            /**\r\n             * Helper function to get details for all node attributes.\r\n             * @param attributes The node attributes.\r\n             * @returns The attribute details for a node.\r\n             */\r\n            const getAttributeDetails = (attributes: Attribute[]) =>\r\n                attributes.length > 0 ? attributes.map((attribute) => attribute.getDetails()) : null;\r\n\r\n            // Push the current node into the flattened nodes array.\r\n            flattenedTreeNodes.push({\r\n                id: node.getUid(),\r\n                type: node.getType(),\r\n                caption: node.getName(),\r\n                state: node.getState(),\r\n                attributes: getAttributeDetails(node.getAttributes()),\r\n                arguments: node.getArguments(),\r\n                parentId: parentUid\r\n            });\r\n\r\n            // Process each of the nodes children if it is not a leaf node.\r\n            if (!node.isLeafNode()) {\r\n                (node as Composite | Decorator)\r\n                    .getChildren()\r\n                    .forEach((child) => processNode(child, (node as Composite | Decorator).getUid()));\r\n            }\r\n        };\r\n\r\n        // Convert the nested node structure into a flattened array of node details.\r\n        processNode(this.rootNode, null);\r\n\r\n        return flattenedTreeNodes;\r\n    }\r\n\r\n    /**\r\n     * Registers the action/condition/guard/callback function or subtree with the given name.\r\n     * @param name The name of the function or subtree to register.\r\n     * @param value The function or subtree definition to register.\r\n     */\r\n    static register(name: string, value: GlobalFunction | string) {\r\n        if (typeof value === \"function\") {\r\n            // We are going to register a action/condition/guard/callback function.\r\n            Lookup.setFunc(name, value);\r\n        } else if (typeof value === \"string\") {\r\n            // We are going to register a subtree.\r\n            let rootASTNodes: RootAstNode[];\r\n\r\n            try {\r\n                // Try to create the behaviour tree AST based on the definition provided, this could fail if the definition is invalid.\r\n                rootASTNodes = buildRootASTNodes(value);\r\n            } catch (exception) {\r\n                // There was an issue in trying to parse and build the tree definition.\r\n                throw new Error(`error registering definition: ${(exception as Error).message}`);\r\n            }\r\n\r\n            // This function should only ever be called with a definition containing a single unnamed root node.\r\n            if (rootASTNodes.length != 1 || rootASTNodes[0].name !== null) {\r\n                throw new Error(\"error registering definition: expected a single unnamed root node\");\r\n            }\r\n\r\n            Lookup.setSubtree(name, rootASTNodes[0]);\r\n        } else {\r\n            throw new Error(\"unexpected value, expected string definition or function\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unregisters the registered action/condition/guard/callback function or subtree with the given name.\r\n     * @param name The name of the registered action/condition/guard/callback function or subtree to unregister.\r\n     */\r\n    static unregister(name: string): void {\r\n        Lookup.remove(name);\r\n    }\r\n\r\n    /**\r\n     * Unregister all registered action/condition/guard/callback functions and subtrees.\r\n     */\r\n    static unregisterAll(): void {\r\n        Lookup.empty();\r\n    }\r\n\r\n    /**\r\n     * Parses a behaviour tree definition and creates a tree of behaviour tree nodes.\r\n     * @param {string} definition The behaviour tree definition.\r\n     * @returns The root behaviour tree node.\r\n     */\r\n    private static createRootNode(definition: string): Root {\r\n        try {\r\n            // Try to create the behaviour tree AST based on the definition provided, this could fail if the definition is invalid.\r\n            const rootASTNodes = buildRootASTNodes(definition);\r\n\r\n            // Create a symbol to use as the main root key in our root node mapping.\r\n            const mainRootNodeKey = Symbol(\"__root__\");\r\n\r\n            // Create a mapping of root node names to root AST tokens. The main root node will have a key of Symbol(\"__root__\").\r\n            const rootNodeMap: { [key: string | symbol]: RootAstNode } = {};\r\n            for (const rootASTNode of rootASTNodes) {\r\n                rootNodeMap[rootASTNode.name === null ? mainRootNodeKey : rootASTNode.name!] = rootASTNode;\r\n            }\r\n\r\n            // Convert the AST to our actual tree and get the root node.\r\n            const rootNode: Root = rootNodeMap[mainRootNodeKey].createNodeInstance(\r\n                // Create a provider for named root nodes that are part of our definition or have been registered. Prioritising the former.\r\n                (name: string): RootAstNode => (rootNodeMap[name] ? rootNodeMap[name] : Lookup.getSubtree(name)),\r\n                []\r\n            );\r\n\r\n            // Set a guard path on every leaf of the tree to evaluate as part of its update.\r\n            BehaviourTree.applyLeafNodeGuardPaths(rootNode);\r\n\r\n            // Return the root node.\r\n            return rootNode;\r\n        } catch (exception) {\r\n            // There was an issue in trying to parse and build the tree definition.\r\n            throw new Error(`error parsing tree: ${(exception as Error).message}\\n${(exception as Error).stack}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Applies a guard path to every leaf of the tree to evaluate as part of each update.\r\n     * @param rootNode The main root tree node.\r\n     */\r\n    private static applyLeafNodeGuardPaths(rootNode: Root) {\r\n        const nodePaths: Node[][] = [];\r\n\r\n        const findLeafNodes = (path: Node[], node: Node) => {\r\n            // Add the current node to the path.\r\n            path = path.concat(node);\r\n\r\n            // Check whether the current node is a leaf node.\r\n            if (node.isLeafNode()) {\r\n                nodePaths.push(path);\r\n            } else {\r\n                (node as Composite | Decorator).getChildren().forEach((child) => findLeafNodes(path, child));\r\n            }\r\n        };\r\n\r\n        // Find all leaf node paths, starting from the root.\r\n        findLeafNodes([], rootNode);\r\n\r\n        nodePaths.forEach((path) => {\r\n            // Each node in the current path will have to be assigned a guard path, working from the root outwards.\r\n            for (let depth = 0; depth < path.length; depth++) {\r\n                // Get the node in the path at the current depth.\r\n                const currentNode = path[depth];\r\n\r\n                // The node may already have been assigned a guard path, if so just skip it.\r\n                if (currentNode.hasGuardPath()) {\r\n                    continue;\r\n                }\r\n\r\n                // Create the guard path for the current node.\r\n                const guardPath = new GuardPath(\r\n                    path\r\n                        .slice(0, depth + 1)\r\n                        .map<GuardPathPart>((node) => ({ node, guards: node.getGuardAttributes() }))\r\n                        .filter((details) => details.guards.length > 0)\r\n                );\r\n\r\n                // Assign the guard path to the current node.\r\n                currentNode.setGuardPath(guardPath);\r\n            }\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["State"]
}
